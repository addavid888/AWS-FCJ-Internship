[{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/","title":"Báo cáo thực tập","tags":[],"description":"","content":"Báo cáo thực tập Thông tin sinh viên: Họ và tên: Phạm Anh Duy\nSố điện thoại: 0325480983\nEmail: phamanhduyqb@gmail.com\nTrường: Đại học FPT TP.HCM\nNgành: Kỹ thuật phần mềm\nCông ty thực tập: Công ty TNHH Amazon Web Services Vietnam\nVị trí thực tập: FCJ Cloud Intern\nThời gian thực tập: Từ ngày 08/09/2025 đến ngày 8/12/2025 (dự kiến)\nNội dung báo cáo Worklog Proposal Các bài blogs đã dịch Các events đã tham gia Workshop Tự đánh giá Chia sẻ, đóng góp ý kiến "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.4-s3-onprem/5.4.1-prepare/","title":"Chuẩn bị tài nguyên","tags":[],"description":"","content":"Để chuẩn bị cho phần này của workshop, bạn sẽ cần phải:\nTriển khai CloudFormation stack Sửa đổi bảng định tuyến VPC. Các thành phần này hoạt động cùng nhau để mô phỏng DNS forwarding và name resolution.\nTriển khai CloudFormation stack Mẫu CloudFormation sẽ tạo các dịch vụ bổ sung để hỗ trợ mô phỏng môi trường truyền thống:\nMột Route 53 Private Hosted Zone lưu trữ các bản ghi Bí danh (Alias records) cho điểm cuối PrivateLink S3 Một Route 53 Inbound Resolver endpoint cho phép \u0026ldquo;VPC Cloud\u0026rdquo; giải quyết các yêu cầu resolve DNS gửi đến Private Hosted Zone Một Route 53 Outbound Resolver endpoint cho phép \u0026ldquo;VPC On-prem\u0026rdquo; chuyển tiếp các yêu cầu DNS cho S3 sang \u0026ldquo;VPC Cloud\u0026rdquo; Click link sau để mở AWS CloudFormation console. Mẫu yêu cầu sẽ được tải sẵn vào menu. Chấp nhận tất cả mặc định và nhấp vào Tạo stack. Có thể mất vài phút để triển khai stack hoàn tất. Bạn có thể tiếp tục với bước tiếp theo mà không cần đợi quá trình triển khai kết thúc.\nCập nhật bảng định tuyến private on-premise Workshop này sử dụng StrongSwan VPN chạy trên EC2 instance để mô phỏng khả năng kết nối giữa trung tâm dữ liệu truyền thống và môi trường cloud AWS. Hầu hết các thành phần bắt buộc đều được cung cấp trước khi bạn bắt đầu. Để hoàn tất cấu hình VPN, bạn sẽ sửa đổi bảng định tuyến \u0026ldquo;VPC on-prem\u0026rdquo; để hướng lưu lượng đến cloud đi qua StrongSwan VPN instance.\nMở Amazon EC2 console\nChọn instance tên infra-vpngw-test. Từ Details tab, copy Instance ID và paste vào text editor của bạn để sử dụng ở những bước tiếp theo\nĐi đến VPC menu bằng cách gõ \u0026ldquo;VPC\u0026rdquo; vào Search box\nClick vào Route Tables, chọn RT Private On-prem route table, chọn Routes tab, và click Edit Routes.\nClick Add route. Destination: CIDR block của Cloud VPC Target: ID của infra-vpngw-test instance (bạn đã lưu lại ở bước trên) Click Save changes "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/3-blogstranslated/3.1-blog1/","title":"Định tuyến động các request với routing rules của Amazon API Gateway","tags":[],"description":"","content":"Xem bài viết gốc tại đây\nbởi Anton Aleksandrov và Giedrius Praspaliauskas vào 3 THÁNG 6 2025\nQuản lý API hiệu quả và khả năng định tuyến là yếu tố then chốt đối với các tổ chức vận hành hệ thống ứng dụng phức tạp. Dù bạn là công ty công nghệ triển khai các phiên bản API mới cho hàng triệu người dùng, hay tổ chức tài chính chạy thử nghiệm A/B để tối ưu trải nghiệm khách hàng, thì khả năng định tuyến lưu lượng API một cách động và hiệu quả là vô cùng quan trọng.\nAmazon API Gateway hiện đã hỗ trợ Dynamic Routing Rules cho custom domain names trên tất cả các AWS Region. Tính năng này cho phép bạn định tuyến request dựa trên giá trị HTTP header, độc lập hoặc kết hợp với URL path. Trong bài viết này, bạn sẽ học cách sử dụng tính năng mới để triển khai chiến lược định tuyến như API versioning hay gradual rollout mà không cần chỉnh sửa endpoint.\nTổng Quan Về Dynamic Routing Rules Nhiều tổ chức yêu cầu khả năng định tuyến API động để đáp ứng các nhu cầu kinh doanh ngày càng phát triển. Với vai trò là một persona thuộc bộ phận kinh doanh, bạn muốn có thể thử nghiệm trải nghiệm người dùng mới với những phân khúc khách hàng cụ thể, đồng thời vẫn giữ nguyên các luồng hoạt động hiện có. Là một kỹ sư, bạn muốn có khả năng duy trì nhiều phiên bản API trên các ứng dụng client khác nhau trong khi vẫn đảm bảo tuân thủ quy định. Trước khi có Dynamic Routing Rules, các nhà phát triển sử dụng API Gateway đã triển khai định tuyến động bằng cách dùng các URL path khác nhau, như \u0026ldquo;/v1/products\u0026rdquo; và \u0026ldquo;/v2/products\u0026rdquo;.\nVới Dynamic Routing Rules, bạn có thể triển khai logic định tuyến động bằng một cấu hình khai báo đơn giản trong phần cài đặt custom domain name. Cơ chế routing rule mới cho phép bạn đưa ra các quyết định định tuyến dựa trên HTTP headers, base paths, hoặc kết hợp cả hai. Các nhà phát triển không còn cần phải tạo mới hoặc thay đổi các path hiện có để chuyển đổi mượt giữa các phiên bản API, họ chỉ cần chỉ định giá trị mong muốn trong request HTTP header. Trong số các khả năng khác, bạn có thể triển khai định tuyến kiến trúc cell-based, A/B testing, hoặc lựa chọn backend động dựa trên hostname, tenant ID, accepted response media type, hoặc cookie value. Bằng cách triển khai logic định tuyến trực tiếp trong API Gateway, bạn có thể loại bỏ các proxy layers và các cấu trúc URL phức tạp trong khi vẫn duy trì quyền kiểm soát chi tiết với traffic API của bạn. Tính năng mới này tích hợp liền mạch với các khả năng hiện có của API Gateway và hỗ trợ cả REST APIs công khai và riêng tư. Sơ đồ sau cho thấy cách bạn có thể sử dụng routing rules cho định tuyến dựa trên header và base-path. Ví dụ này sử dụng một tài nguyên cấp một /products để minh họa khớp path, tuy nhiên tùy thuộc vào use-case bạn cũng có thể dùng các path nhiều cấp như /products/items.\nHình 1. Sử dụng routing rules cho định tuyến dựa trên header và base-path\nTrong phần tiếp theo, bạn sẽ học cách triển khai header-based routing, sử dụng cấu trúc routing rules mới cho các kịch bản phổ biến như API versioning và A/B testing, và cấu hình các rule với những điều kiện định tuyến và độ ưu tiên khác nhau để đạt được hành vi mong muốn.\nRouting rule là gì Routing rule là một loại tài nguyên mới được liên kết duy nhất với một custom domain. Nó biểu diễn một tập hợp các điều kiện mà, khi được khớp, sẽ khiến request đến được chuyển tiếp đến một API và stage cụ thể. Routing rules có ba thuộc tính cấu hình:\nThuộc tính Conditions định nghĩa các tiêu chí phải được đáp ứng để hành động được thực hiện. Một rule có thể bao gồm tối đa hai header conditions và một base path condition, và tất cả các điều kiện được chỉ định phải được đáp ứng để kích hoạt hành động. Nếu không có điều kiện nào được định nghĩa cho một rule, nó đóng vai trò như một rule catch-all khớp với tất cả các request.\nThuộc tính Actions định nghĩa hành động nào sẽ được thực hiện khi các điều kiện của rule được đáp ứng. Tại thời điểm này, hành động được hỗ trợ là gọi bất kỳ stage nào của bất kỳ REST API nào trong cùng một account và region.\nThuộc tính Priority định nghĩa thứ tự mà các rule được đánh giá, với 1 là ưu tiên cao nhất và 1,000,000 là thấp nhất. Bạn không thể tái sử dụng cùng một giá trị priority cho nhiều hơn một rule. AWS khuyến nghị bạn để khoảng cách rộng giữa các rule liên tiếp để dễ dàng thêm rule mới trong tương lai, ví dụ sử dụng 100, 200, 300 thay vì 1, 2, 3.\nHeader conditions, được chỉ định qua thuộc tính MatchHeaders, được dùng để khớp giá trị HTTP request header, ví dụ như x-version=v1. Theo chuẩn RFC 7230, tên header không phân biệt chữ hoa chữ thường, trong khi giá trị header thì phân biệt. Bạn cũng có thể sử dụng ký tự đại diện (wildcards) trong giá trị header cho các kiểu so khớp prefix, suffix, và contains. Sau đây là các ví dụ sử dụng các template AWS CloudFormation:\nExact match (khớp chính xác):\n- MatchHeaders: AnyOf: - Header: \u0026#34;x-version\u0026#34; ValueGlob: \u0026#34;alpha-v2-latest\u0026#34; Chỉ khớp với x-version=alpha-v2-latest.\nPrefix match (khớp tiền tố):\n- MatchHeaders: AnyOf: - Header: \u0026#34;x-version\u0026#34; ValueGlob: \u0026#34;*latest\u0026#34; Khớp x-version=alpha-v2-latest, nhưng không khớp x-version=alpha-v2.\nSuffix match (khớp hậu tố):\n- MatchHeaders: AnyOf: - Header: \u0026#34;x-version\u0026#34; ValueGlob: \u0026#34;alpha*\u0026#34; Khớp x-version=alpha-v2-latest và x-version=alpha-v1, nhưng không khớp x-version=beta-v1.\nPrefix và suffix match:\n- MatchHeaders: AnyOf: - Header: \u0026#34;x-version\u0026#34; ValueGlob: \u0026#34;*v2*\u0026#34; Khớp x-version=alpha-v2-latest và x-version=beta-v2-test, nhưng không khớp x-version=alpha-v1.\nBase path condition, được chỉ định qua MatchBasePaths, dùng để khớp với request path đến. Việc khớp phân biệt chữ hoa chữ thường.\n- MatchBasePaths: AnyOf: - \u0026#34;products\u0026#34; Bạn có thể có tối đa hai MatchHeaders và một MatchBasePaths cho mỗi routing rule. Các điều kiện được đánh giá bằng toán tử AND, nghĩa là tất cả điều kiện phải được đáp ứng để hành động được thực hiện. Cả hai loại điều kiện đều hỗ trợ một giá trị so sánh duy nhất dưới thuộc tính AnyOf. Ví dụ sau đây minh họa một routing rule với hai điều kiện MatchHeaders và một điều kiện MatchBasePaths:\nProductsV1RoutingRule: Type: \u0026#39;AWS::ApiGatewayV2::RoutingRule\u0026#39; Properties: DomainNameArn: !Sub \u0026#34;arn:aws:apigateway:${AWS::Region}::/domainnames/${ApiCustomDomain}\u0026#34; Priority: 100 Conditions: - MatchHeaders: AnyOf: - Header: \u0026#34;x-version\u0026#34; ValueGlob: \u0026#34;v2\u0026#34; - MatchHeaders: AnyOf: - Header: \u0026#34;x-user-cohort\u0026#34; ValueGlob: \u0026#34;beta-testers\u0026#34; - MatchBasePaths: AnyOf: - \u0026#34;products\u0026#34; Actions: - InvokeApi: ApiId: !Ref ProductsV2Api Stage: !Ref ProductsV2Stage Rule này sẽ khớp các request tới https://example.com/products khi cả hai header condition đều được đáp ứng \u0026ndash; x-version=v2 và x-user-cohort=beta-testers. Rule này sẽ không khớp các request tới base path khác, ví dụ https://example.com/orders, hoặc các request không đáp ứng ít nhất một header condition.\nTrong các kịch bản như API versioning, bạn có thể tạo rule để đánh giá các header như \u0026ldquo;accept\u0026rdquo; hoặc \u0026ldquo;version\u0026rdquo; để định tuyến lưu lượng đến các API implementation khác nhau. Ví dụ, để định tuyến request chứa \u0026ldquo;x-version: api-beta\u0026rdquo; tới API beta của bạn, bạn sẽ tạo một rule chỉ định điều kiện header này và đặt action để định tuyến tới triển khai API beta.\nHeader-based routing cũng đơn giản hóa việc A/B testing bằng cách cho phép bạn định nghĩa các nhóm client dựa trên custom headers, cho phép thực hiện thử nghiệm có kiểm soát với các cấu hình khác nhau. Bạn có thể tạo rule kiểm tra một custom header như x-test-group để định tuyến người dùng cụ thể tới các implementation API khác nhau. Hệ thống priority đảm bảo hành vi định tuyến có thể dự đoán \u0026ndash; khi nhiều rule khớp với một request, rule có số priority thấp nhất (tức là precedence cao nhất) sẽ quyết định định tuyến. Việc kết hợp cả header và path conditions trong một rule duy nhất cho phép các kịch bản định tuyến phức tạp, ví dụ như định tuyến theo version cụ thể cho các tài nguyên API cụ thể thay vì toàn bộ API, như minh họa trong sơ đồ sau.\nHình 2. Cấu hình định tuyến với hai header và một bộ path conditions trong API Gateway Console.\nTham khảo tài liệu về API Gateway để xem hướng dẫn chi tiết về cách tạo routing rules.\nCấu hình Routing Mode Trước khi bạn bắt đầu tạo routing rules, bạn phải trước tiên tạo ít nhất một API, một stage, và một custom domain name. Bạn có thể cấu hình custom domain name của bạn với cài đặt routing mode mới.\nAPI mappings only. Đây là chế độ mặc định. Khi sử dụng chế độ này, bạn có thể tiếp tục dùng base path mappings để định tuyến requests tới các API khác nhau, và không dùng Routing Rules chút nào. Chế độ này duy trì hành vi hiện tại, nơi mà requests chỉ được định tuyến dựa trên base path mappings.\nRouting rules then API mappings. Với chế độ này bạn có thể dùng Routing Rules đồng thời vẫn giữ base path mappings như là một fallback. Khi bạn sử dụng chế độ này, Routing Rules luôn được ưu tiên, và các requests không được khớp sẽ được đánh giá với base path mappings. Chế độ này hữu ích để chuyển đổi dần dần các API của bạn sang Routing Rules.\nRouting rules only. Chế độ này mang đến cho bạn sự linh hoạt để chỉ dùng routing rules, và không phụ thuộc vào base paths mà bạn có thể đã tạo trước đó trên domain bằng API mappings. Đây là routing mode được khuyến nghị; nó hữu ích khi bạn bắt đầu với một custom domain mới hoặc đã hoàn tất việc chuyển đổi từ API mappings sang Routing Rules cho một custom domain hiện có.\nKhi chuyển đổi từ một routing mode sang một mode khác, hãy luôn kiểm thử cấu hình mới của bạn trong môi trường không phải production trước. Ví dụ, khi chuyển đổi mode từ API mappings only sang Routing rules only, lưu lượng của bạn sẽ chỉ được định tuyến bằng Routing rules; các API mappings hiện có sẽ không còn hiệu lực nữa.\nBắt đầu với Header-Based Routing Bạn có thể áp dụng Header-Based Routing mới cho các custom domain API Gateway hiện có của bạn với cách tiếp cận zero-downtime, giảm thiểu rủi ro. Bước đầu tiên là cấu hình custom domain của bạn để sử dụng chế độ Routing rules then API mappings bằng API Gateway console, AWS CLI, hoặc công cụ hạ tầng dưới dạng code (IaC) của bạn. Cấu hình này đảm bảo rằng trong khi bạn dần dần tạo Routing Rules, các base path mappings hiện có của bạn tiếp tục hoạt động như các route dự phòng (fallback). Do Routing Rules được đánh giá trước base path mappings, và trong trường hợp không có rule nào khớp, các request sẽ tự động quay lại (fall back) sang base path mappings hiện có, lưu lượng API hiện tại của bạn vẫn không bị ảnh hưởng trong quá trình chuyển đổi này.\nKhi bạn đã cấu hình routing mode, bạn có thể đưa dần Routing Rules vào song song với thiết lập hiện tại. Ví dụ, bạn có thể bắt đầu bằng cách tạo một rule với một test header cụ thể định tuyến tới một phiên bản API mới, cho phép bạn xác thực hành vi định tuyến với lượng lưu lượng kiểm soát trong khi lưu lượng production vẫn tiếp tục đi qua base path mappings hiện tại của bạn. Khi bạn tự tin với cấu hình routing mới, bạn có thể dần mở rộng rules, điều chỉnh priority, và tùy chọn di chuyển hoàn toàn khỏi base path mappings. Cách tiếp cận gia tăng này, kết hợp với các khả năng observability (quan sát) của API Gateway được mô tả ở phần tiếp theo, cho phép bạn xác thực từng thay đổi và đảm bảo rằng người sử dụng API của bạn không gặp gián đoạn trong quá trình chuyển đổi.\nObservability (Khả năng quan sát) API Gateway cung cấp khả năng quan sát toàn diện về cách các routing rules của bạn xử lý requests thông qua access logging. Mỗi request bây giờ bao gồm các biến ngữ cảnh bổ sung giúp bạn hiểu quá trình quyết định định tuyến. Biến $context.customDomain.routingRuleIdMatched xác định rule nào đã được khớp và áp dụng cho request. Trong khi các biến hiện có như $context.domainName, $context.apiId, và $context.stage cung cấp đầy đủ ngữ cảnh định tuyến. Bằng cách phân tích các access logs này, bạn có thể xác minh hành vi định tuyến, khắc phục sự cố liên quan đến unexpected routes, và thu thập thông tin chi tiết về mẫu lưu lượng giữa các phiên bản API hoặc các biến thể thử nghiệm khác nhau.\nVí dụ tổng thể Xem xét một kịch bản thực tế, nơi một nhóm cần phải dần dần di chuyển người dùng sang một phiên bản API mới, chẳng hạn như một nền tảng thương mại điện tử đang cập nhật API checkout của họ từ v1 sang v2. Trước tiên, nhóm này tạo hai REST API khác nhau \u0026ndash; một cho mỗi phiên bản. Sau đó, họ thiết lập một Routing Rule với priority 100 để kiểm tra header x-version=v2 và định tuyến các request khớp đến API v2. Họ cũng tạo một rule khác với priority 200 để định tuyến tất cả các request có path bắt đầu bằng /checkout đến API v1 như một fallback.\n{width=\u0026ldquo;6.299212598425197in\u0026rdquo; height=\u0026ldquo;3.5972222222222223in\u0026rdquo;}\nHình 3. Dần dần chuyển đổi clients từ v1 sang v2 API\nTrong mã nguồn của ứng dụng, họ thêm header x-version cho một tỷ lệ nhỏ người dùng. Họ theo dõi hiệu năng và tỷ lệ lỗi bằng cách sử dụng khả năng telemetry của API Gateway, bằng cách theo dõi access logs và execution logs, cùng với các metrics được phát ra. Khi đủ tin tưởng, họ dần tăng tỷ lệ người dùng gửi header v2. Cách tiếp cận này đảm bảo một quá trình chuyển dịch có kiểm soát với rủi ro tối thiểu và khả năng rollback nhanh chóng chỉ bằng cách loại bỏ header khỏi các request hoặc thay đổi một routing rule.\nMẫu thử Làm theo hướng dẫn trong repository GitHub này để provision sample trong tài khoản AWS của bạn. Project này minh họa việc sử dụng dynamic routing với API Gateway.\nKết luận Header-based routing mang lại những lợi thế đáng kể cho người dùng API Gateway. Tính năng này có khả năng backward compatibility (tương thích ngược) đảm bảo một con đường chuyển đổi mượt mà \u0026ndash; bạn có thể duy trì các base path mappings hiện có trong khi dần dần áp dụng Routing Rules, hoặc sử dụng cả hai cơ chế đồng thời với tùy chọn fallback. Sự linh hoạt này cho phép bạn chuyển dịch theo tốc độ của riêng mình mà không làm gián đoạn các ứng dụng hiện tại. Giải pháp này tiết kiệm chi phí, nhờ vào việc không có khoản phí bổ sung nào khi sử dụng Routing Rules trên REST APIs. Giải pháp này còn giảm yêu cầu phải tận dụng các dịch vụ và hạ tầng bổ sung cho việc định tuyến động. Hệ thống đánh giá dựa trên priority cung cấp hành vi định tuyến có tính quyết định (deterministic), giúp dễ dàng hiểu và khắc phục sự cố các quyết định về định tuyến.\nĐể tìm hiểu thêm về API Gateway header-based routing, hãy xem tài liệu về dịch vụ.\nĐể tìm hiểu thêm về các cấu trúc Serverless, truy cập Serverless Land.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/4-eventparticipated/4.1-event1/","title":"Event 1","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nBài thu hoạch “GenAI-powered App-DB Modernization workshop” Mục Đích Của Sự Kiện Chia sẻ best practices trong thiết kế ứng dụng hiện đại Giới thiệu phương pháp DDD và event-driven architecture Hướng dẫn lựa chọn compute services phù hợp Giới thiệu công cụ AI hỗ trợ development lifecycle Danh Sách Diễn Giả Jignesh Shah - Director, Open Source Databases Erica Liu - Sr. GTM Specialist, AppMod Fabrianne Effendi - Assc. Specialist SA, Serverless Amazon Web Services Nội Dung Nổi Bật Đưa ra các ảnh hưởng tiêu cực của kiến trúc ứng dụng cũ Thời gian release sản phẩm lâu → Mất doanh thu/bỏ lỡ cơ hội Hoạt động kém hiệu quả → Mất năng suất, tốn kém chi phí Không tuân thủ các quy định về bảo mật → Mất an ninh, uy tín Chuyển đổi sang kiến trúc ứng dụng mới - Microservice Architecture Chuyển đổi thành hệ thống modular – từng chức năng là một dịch vụ độc lập giao tiếp với nhau qua sự kiện với 3 trụ cột cốt lõi:\nQueue Management: Xử lý tác vụ bất đồng bộ Caching Strategy: Tối ưu performance Message Handling: Giao tiếp linh hoạt giữa services Domain-Driven Design (DDD) Phương pháp 4 bước: Xác định domain events → sắp xếp timeline → identify actors → xác định bounded contexts Case study bookstore: Minh họa cách áp dụng DDD thực tế Context mapping: 7 patterns tích hợp bounded contexts Event-Driven Architecture 3 patterns tích hợp: Publish/Subscribe, Point-to-point, Streaming Lợi ích: Loose coupling, scalability, resilience So sánh sync vs async: Hiểu rõ trade-offs (sự đánh đổi) Compute Evolution Shared Responsibility Model: Từ EC2 → ECS → Fargate → Lambda Serverless benefits: No server management, auto-scaling, pay-for-value Functions vs Containers: Criteria lựa chọn phù hợp Amazon Q Developer SDLC automation: Từ planning đến maintenance Code transformation: Java upgrade, .NET modernization AWS Transform agents: VMware, Mainframe, .NET migration Những Gì Học Được Tư Duy Thiết Kế Business-first approach: Luôn bắt đầu từ business domain, không phải technology Ubiquitous language: Importance của common vocabulary giữa business và tech teams Bounded contexts: Cách identify và manage complexity trong large systems Kiến Trúc Kỹ Thuật Event storming technique: Phương pháp thực tế để mô hình hóa quy trình kinh doanh Sử dụng Event-driven communication thay vì synchronous calls Integration patterns: Hiểu khi nào dùng sync, async, pub/sub, streaming Compute spectrum: Criteria chọn từ VM → containers → serverless Chiến Lược Hiện Đại Hóa Phased approach: Không rush, phải có roadmap rõ ràng 7Rs framework: Nhiều con đường khác nhau tùy thuộc vào đặc điểm của mỗi ứng dụng ROI measurement: Cost reduction + business agility Ứng Dụng Vào Công Việc Áp dụng DDD cho project hiện tại: Event storming sessions với business team Refactor microservices: Sử dụng bounded contexts để identify service boundaries Implement event-driven patterns: Thay thế một số sync calls bằng async messaging Serverless adoption: Pilot AWS Lambda cho một số use cases phù hợp Try Amazon Q Developer: Integrate vào development workflow để boost productivity Trải nghiệm trong event Tham gia workshop “GenAI-powered App-DB Modernization” là một trải nghiệm rất bổ ích, giúp tôi có cái nhìn toàn diện về cách hiện đại hóa ứng dụng và cơ sở dữ liệu bằng các phương pháp và công cụ hiện đại. Một số trải nghiệm nổi bật:\nHọc hỏi từ các diễn giả có chuyên môn cao Các diễn giả đến từ AWS và các tổ chức công nghệ lớn đã chia sẻ best practices trong thiết kế ứng dụng hiện đại. Qua các case study thực tế, tôi hiểu rõ hơn cách áp dụng Domain-Driven Design (DDD) và Event-Driven Architecture vào các project lớn. Trải nghiệm kỹ thuật thực tế Tham gia các phiên trình bày về event storming giúp tôi hình dung cách mô hình hóa quy trình kinh doanh thành các domain events. Học cách phân tách microservices và xác định bounded contexts để quản lý sự phức tạp của hệ thống lớn. Hiểu rõ trade-offs giữa synchronous và asynchronous communication cũng như các pattern tích hợp như pub/sub, point-to-point, streaming. Ứng dụng công cụ hiện đại Trực tiếp tìm hiểu về Amazon Q Developer, công cụ AI hỗ trợ SDLC từ lập kế hoạch đến maintenance. Học cách tự động hóa code transformation và pilot serverless với AWS Lambda, từ đó nâng cao năng suất phát triển. Kết nối và trao đổi Workshop tạo cơ hội trao đổi trực tiếp với các chuyên gia, đồng nghiệp và team business, giúp nâng cao ngôn ngữ chung (ubiquitous language) giữa business và tech. Qua các ví dụ thực tế, tôi nhận ra tầm quan trọng của business-first approach, luôn bắt đầu từ nhu cầu kinh doanh thay vì chỉ tập trung vào công nghệ. Bài học rút ra Việc áp dụng DDD và event-driven patterns giúp giảm coupling, tăng scalability và resilience cho hệ thống. Chiến lược hiện đại hóa cần phased approach và đo lường ROI, không nên vội vàng chuyển đổi toàn bộ hệ thống. Các công cụ AI như Amazon Q Developer có thể boost productivity nếu được tích hợp vào workflow phát triển hiện tại. Một số hình ảnh khi tham gia sự kiện Thêm các hình ảnh của các bạn tại đây Tổng thể, sự kiện không chỉ cung cấp kiến thức kỹ thuật mà còn giúp tôi thay đổi cách tư duy về thiết kế ứng dụng, hiện đại hóa hệ thống và phối hợp hiệu quả hơn giữa các team.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/4-eventparticipated/4.2-event2/","title":"Event 2","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nBài thu hoạch “GenAI-powered App-DB Modernization workshop” Mục Đích Của Sự Kiện Chia sẻ best practices trong thiết kế ứng dụng hiện đại Giới thiệu phương pháp DDD và event-driven architecture Hướng dẫn lựa chọn compute services phù hợp Giới thiệu công cụ AI hỗ trợ development lifecycle Danh Sách Diễn Giả Jignesh Shah - Director, Open Source Databases Erica Liu - Sr. GTM Specialist, AppMod Fabrianne Effendi - Assc. Specialist SA, Serverless Amazon Web Services Nội Dung Nổi Bật Đưa ra các ảnh hưởng tiêu cực của kiến trúc ứng dụng cũ Thời gian release sản phẩm lâu → Mất doanh thu/bỏ lỡ cơ hội Hoạt động kém hiệu quả → Mất năng suất, tốn kém chi phí Không tuân thủ các quy định về bảo mật → Mất an ninh, uy tín Chuyển đổi sang kiến trúc ứng dụng mới - Microservice Architecture Chuyển đổi thành hệ thống modular – từng chức năng là một dịch vụ độc lập giao tiếp với nhau qua sự kiện với 3 trụ cột cốt lõi:\nQueue Management: Xử lý tác vụ bất đồng bộ Caching Strategy: Tối ưu performance Message Handling: Giao tiếp linh hoạt giữa services Domain-Driven Design (DDD) Phương pháp 4 bước: Xác định domain events → sắp xếp timeline → identify actors → xác định bounded contexts Case study bookstore: Minh họa cách áp dụng DDD thực tế Context mapping: 7 patterns tích hợp bounded contexts Event-Driven Architecture 3 patterns tích hợp: Publish/Subscribe, Point-to-point, Streaming Lợi ích: Loose coupling, scalability, resilience So sánh sync vs async: Hiểu rõ trade-offs (sự đánh đổi) Compute Evolution Shared Responsibility Model: Từ EC2 → ECS → Fargate → Lambda Serverless benefits: No server management, auto-scaling, pay-for-value Functions vs Containers: Criteria lựa chọn phù hợp Amazon Q Developer SDLC automation: Từ planning đến maintenance Code transformation: Java upgrade, .NET modernization AWS Transform agents: VMware, Mainframe, .NET migration Những Gì Học Được Tư Duy Thiết Kế Business-first approach: Luôn bắt đầu từ business domain, không phải technology Ubiquitous language: Importance của common vocabulary giữa business và tech teams Bounded contexts: Cách identify và manage complexity trong large systems Kiến Trúc Kỹ Thuật Event storming technique: Phương pháp thực tế để mô hình hóa quy trình kinh doanh Sử dụng Event-driven communication thay vì synchronous calls Integration patterns: Hiểu khi nào dùng sync, async, pub/sub, streaming Compute spectrum: Criteria chọn từ VM → containers → serverless Chiến Lược Hiện Đại Hóa Phased approach: Không rush, phải có roadmap rõ ràng 7Rs framework: Nhiều con đường khác nhau tùy thuộc vào đặc điểm của mỗi ứng dụng ROI measurement: Cost reduction + business agility Ứng Dụng Vào Công Việc Áp dụng DDD cho project hiện tại: Event storming sessions với business team Refactor microservices: Sử dụng bounded contexts để identify service boundaries Implement event-driven patterns: Thay thế một số sync calls bằng async messaging Serverless adoption: Pilot AWS Lambda cho một số use cases phù hợp Try Amazon Q Developer: Integrate vào development workflow để boost productivity Trải nghiệm trong event Tham gia workshop “GenAI-powered App-DB Modernization” là một trải nghiệm rất bổ ích, giúp tôi có cái nhìn toàn diện về cách hiện đại hóa ứng dụng và cơ sở dữ liệu bằng các phương pháp và công cụ hiện đại. Một số trải nghiệm nổi bật:\nHọc hỏi từ các diễn giả có chuyên môn cao Các diễn giả đến từ AWS và các tổ chức công nghệ lớn đã chia sẻ best practices trong thiết kế ứng dụng hiện đại. Qua các case study thực tế, tôi hiểu rõ hơn cách áp dụng Domain-Driven Design (DDD) và Event-Driven Architecture vào các project lớn. Trải nghiệm kỹ thuật thực tế Tham gia các phiên trình bày về event storming giúp tôi hình dung cách mô hình hóa quy trình kinh doanh thành các domain events. Học cách phân tách microservices và xác định bounded contexts để quản lý sự phức tạp của hệ thống lớn. Hiểu rõ trade-offs giữa synchronous và asynchronous communication cũng như các pattern tích hợp như pub/sub, point-to-point, streaming. Ứng dụng công cụ hiện đại Trực tiếp tìm hiểu về Amazon Q Developer, công cụ AI hỗ trợ SDLC từ lập kế hoạch đến maintenance. Học cách tự động hóa code transformation và pilot serverless với AWS Lambda, từ đó nâng cao năng suất phát triển. Kết nối và trao đổi Workshop tạo cơ hội trao đổi trực tiếp với các chuyên gia, đồng nghiệp và team business, giúp nâng cao ngôn ngữ chung (ubiquitous language) giữa business và tech. Qua các ví dụ thực tế, tôi nhận ra tầm quan trọng của business-first approach, luôn bắt đầu từ nhu cầu kinh doanh thay vì chỉ tập trung vào công nghệ. Bài học rút ra Việc áp dụng DDD và event-driven patterns giúp giảm coupling, tăng scalability và resilience cho hệ thống. Chiến lược hiện đại hóa cần phased approach và đo lường ROI, không nên vội vàng chuyển đổi toàn bộ hệ thống. Các công cụ AI như Amazon Q Developer có thể boost productivity nếu được tích hợp vào workflow phát triển hiện tại. Một số hình ảnh khi tham gia sự kiện Thêm các hình ảnh của các bạn tại đây Tổng thể, sự kiện không chỉ cung cấp kiến thức kỹ thuật mà còn giúp tôi thay đổi cách tư duy về thiết kế ứng dụng, hiện đại hóa hệ thống và phối hợp hiệu quả hơn giữa các team.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.1-workshop-overview/","title":"Giới thiệu","tags":[],"description":"","content":"Giới thiệu về VPC Endpoint Điểm cuối VPC (endpoint) là thiết bị ảo. Chúng là các thành phần VPC có thể mở rộng theo chiều ngang, dự phòng và có tính sẵn sàng cao. Chúng cho phép giao tiếp giữa tài nguyên điện toán của bạn và dịch vụ AWS mà không gây ra rủi ro về tính sẵn sàng. Tài nguyên điện toán đang chạy trong VPC có thể truy cập Amazon S3 bằng cách sử dụng điểm cuối Gateway. Interface Endpoint PrivateLink có thể được sử dụng bởi tài nguyên chạy trong VPC hoặc tại TTDL. Tổng quan về workshop Trong workshop này, bạn sẽ sử dụng hai VPC.\n\u0026ldquo;VPC Cloud\u0026rdquo; dành cho các tài nguyên cloud như Gateway endpoint và EC2 instance để kiểm tra. \u0026ldquo;VPC On-Prem\u0026rdquo; mô phỏng môi trường truyền thống như nhà máy hoặc trung tâm dữ liệu của công ty. Một EC2 Instance chạy phần mềm StrongSwan VPN đã được triển khai trong \u0026ldquo;VPC On-prem\u0026rdquo; và được cấu hình tự động để thiết lập đường hầm VPN Site-to-Site với AWS Transit Gateway. VPN này mô phỏng kết nối từ một vị trí tại TTDL (on-prem) với AWS cloud. Để giảm thiểu chi phí, chỉ một phiên bản VPN được cung cấp để hỗ trợ workshop này. Khi lập kế hoạch kết nối VPN cho production workloads của bạn, AWS khuyên bạn nên sử dụng nhiều thiết bị VPN để có tính sẵn sàng cao. "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/3-blogstranslated/3.2-blog2/","title":"Giới thiệu trải nghiệm lập trình với trí tuệ nhân tạo hành động độc lập trong Visual Studio và JetBrains IDEs","tags":[],"description":"","content":"Xem bài viết gốc tại đây\nbởi Artur Rodrigues và Neeraj Handa, ngày 05 THÁNG 6 2025\nCác lập trình viên dành vô số giờ cho các công việc lặp đi lặp lại như debug code, viết unit tests, và xác thực quy trình build – khoảng thời gian lẽ ra có thể được dùng tốt hơn cho đổi mới và giải quyết vấn đề. Để giải quyết những thách thức này, Amazon Q Developer đã mở rộng khả năng trợ lý lập trình thông minh của mình đến Visual Studio và JetBrains Integrated Development Environments (IDEs). Trải nghiệm agentic mới này hoạt động chủ động thay mặt bạn, tự động phân tích workspace của bạn, sinh code fixes, và thực thi các commands để tối ưu hóa quy trình phát triển của bạn.\n(Trải nghiệm Agentic: trải nghiệm lập trình với trí tuệ nhân tạo có khả năng hành động độc lập, đưa ra quyết định và đạt được mục tiêu một cách tự chủ thay cho lập trình viên)\nTrong bài blog này, chúng ta sẽ khám phá cách Amazon Q Developer tự động hóa việc tạo và thực thi unit tests để xác thực thay đổi code, cũng như tối ưu quy trình build bằng cách nhận diện và xử lý các vấn đề phổ biến.\nVào tháng 5 năm 2025, đồng nghiệp của chúng tôi Brian Beach đã viết về trải nghiệm lập trình agentic mới trong Amazon Q Developer cho VS Code. Bằng cách mở rộng trải nghiệm agentic sang Visual Studio và JetBrains IDEs, Amazon Q Developer giờ đây mang tự động hóa thông minh đến với nhiều lập trình viên hơn.\nLợi ích cho Lập trình viên\nAmazon Q Developer thay đổi cách các lập trình viên làm việc bằng cách tích hợp mượt mà sự hỗ trợ AI vào quy trình hằng ngày mà không cần chuyển đổi ngữ cảnh hoặc rời khỏi môi trường phát triển ưa thích của họ. Với các tính năng như @workspace và @files, bạn có thể nhận được gợi ý có liên quan cao ngay trong IDE. Với khả năng của Q Developer trong việc thực hiện hành động như sinh code diffs và chạy commands, bạn có thể tự động hóa các tác vụ lặp đi lặp lại, triển khai tính năng phức tạp nhanh hơn, và xử lý sự cố mà không làm gián đoạn dòng công việc. Với việc hỗ trợ nhiều ngôn ngữ bao gồm tiếng Anh, tiếng Trung, tiếng Nhật, và tiếng Tây Ban Nha, Amazon Q Developer làm cho hỗ trợ AI tiên tiến trở nên dễ tiếp cận cho các nhóm phát triển toàn cầu, thúc đẩy cộng tác toàn diện trong các tổ chức quốc tế.\nTối Đa Hóa Hiệu Quả Phát Triển với Amazon Q Developer\nBạn có thể hướng dẫn Q Developer rõ ràng bằng cách định nghĩa các file hoặc folder cụ thể trong prompt context. Không biết tìm thông tin ở đâu? Không thành vấn đề! Q Developer có thể điều hướng hiệu quả qua codebase của bạn bằng cách dùng @workspaces để thu thập code snippets liên quan từ nhiều file. Điều này đặc biệt quan trọng khi bạn muốn tạo tài liệu trải rộng nhiều file hoặc khi bạn cần sửa một bug mà không biết bắt đầu từ đâu.\nTính năng agentic chat tự động suy ra context từ các folder của codebase và thực thi commands thay bạn. Nó có cùng khả năng reasoning thông minh được dùng trong Q Developer CLI, vốn đã chiếm được cảm tình của nhiều lập trình viên.\nQuản lý context còn mở rộng đến cấu hình thông qua thư mục .amazonq/rules/. Trong thư mục này, bạn có thể định nghĩa các rule cho coding standards, testing requirements, security protocols, và documentation practices. Một số khách hàng đã tạo một rule định nghĩa cách Q Developer commit changes. Rule này cung cấp một template cho Git commit (bao gồm chi tiết message) và cho các agentic actions sửa file. Điều này giúp dễ dàng hơn để nhận diện và review các đóng góp của Q Developer cho codebase của bạn.\nTham Quan Nhanh Trải Nghiệm Agentic\nHãy cùng đi qua hai use case. Trong ví dụ của chúng tôi, chúng tôi sẽ sử dụng Visual Studio IDE. Các khả năng agentic tương tự cũng đã được hỗ trợ trong JetBrains IDEs. Chúng tôi mời bạn làm theo bằng cách clone repo mẫu Bob’s Used Books và mở nó trong Visual Studio 2022. Đừng quên thêm hoặc cập nhật extension Amazon Q Developer.\nTạo unit tests\nProject Bookstore.Domain chứa các domain objects như Book và ShoppingCart.\nHình 1: Domain objects trong Bookstore.Domain\nChúng tôi có một project riêng tên là Bookstore.Domain.Tests chứa các tests cho lớp Book.\nFigure 2: Tests for Book class\nChúng ta muốn thêm unit tests cho lớp ShoppingCart. Hãy nhờ Amazon Q Developer tạo unit tests cho ShoppingCart. Chúng tôi cũng muốn Amazon Q Developer tuân theo pattern hiện có là tạo test classes trong một project test riêng biệt.\nTheo mặc định, trải nghiệm agentic được bật. Nếu bạn đang trong giai đoạn planning của Software Development Lifecycle (SDLC) và muốn sử dụng kiểu chat truyền thống qua lại, bạn có thể tắt trải nghiệm agentic. Để bật hoặc tắt agentic experience, chọn cặp dấu ngoặc nhọn ở góc trái dưới của cửa sổ chat Q Developer.\nSau đó, chúng tôi hỏi Q Developer: “Can you create a test for @ShoppingCart.cs? Look at existing test and use the same libraries.” Đầu tiên, hãy chú ý rằng chúng tôi đưa ra một command thay vì chỉ đặt câu hỏi. Thứ hai, chúng tôi tham chiếu rõ ràng file ShoppingCart.cs để cung cấp context phù hợp cho Q Developer. Trong hình tiếp theo, bạn có thể thấy rằng Q Developer đang hành động thay mặt chúng tôi. Trong chế độ agentic coding, Q Developer có thể thực hiện hành động và chạy commands. Trong ví dụ của chúng tôi, nó đang đọc file, ghi vào file, và chạy commands với sự cho phép của bạn.\nHình 3: Prompt để tạo các bài test mới\nBằng cách dùng commands, Q Developer có thể phân tích cấu trúc solution của chúng tôi, hiểu rằng chúng tôi có một project tên là Bookstore.Domain.Tests, và tạo một file mới chứa unit tests cho ShoppingCart.\nHình 4: Tóm tắt về các test case\nTa có thể thấy rằng đã có một file mới tên là ShoppingCartTests trong project Bookstore.Domain.Tests, phù hợp với chiến lược tạo test hiện có.\nHình 5: File mới với test cases được sinh ra\nTrong Visual Studio, chúng tôi bây giờ có thể chạy các unit tests và xác nhận rằng chúng pass.\nHình 6: Chạy các bài test mới thành công\nXử lý build errors\nTrong ví dụ tiếp theo, chúng tôi sẽ minh họa sức mạnh của trải nghiệm agentic coding bằng cách dùng Q Developer để build ứng dụng của chúng tôi và xử lý build errors.\nTrong ví dụ, chúng tôi cố ý viết sai chính tả một method trong interface IShoppingCartRepository. Method AddAsync đã bị viết sai thành AddAsyn.\nHình 7: Lỗi chính tả trong tên method\nKhi chúng tôi cố gắng build project Bookstore.Domain, chúng tôi nhận được build error như mong đợi. Hãy nhờ Q Developer sửa lỗi này. Nếu không có agentic coding experience, chúng tôi sẽ phải copy text của build error vào cửa sổ chat và yêu cầu Q Developer đưa ra khuyến nghị. Sau đó chúng tôi sẽ phải làm theo khuyến nghị bằng cách chỉnh sửa thủ công và thử build lại. Đây chỉ là một trong nhiều ví dụ về sức mạnh của agentic chat, cái có thể chạy commands và dùng output của commands để làm giàu context cho prompt nhằm thực hiện hành động.\nVới agentic coding experience, chúng tôi chỉ cần hỏi Q Developer: “Can you fix the error I am getting while building the solution? Please build and check it.” Trong hình dưới đây, bạn sẽ thấy Q Developer chạy các lệnh build .NET để lấy build errors và đọc các file liên quan.\nHình 8: Amazon Q Developer đang tạo ra giải pháp\nTrong hình tiếp theo, Amazon Q Developer cung cấp một bản tóm tắt của lỗi, các hành động nó đã thực hiện để build, và thậm chí giúp tôi với một số khuyến nghị để sửa các warnings mà nó gặp trong khi chạy build.\nHình 9: Sửa lỗi chính tả\nIn the following image, Amazon Q Developer provides a summary of the error, the actions it took to build it. It even helps me with some recommendations to fix the warnings it got while running the build.\nHình 10: Tóm tắt các thay đổi và gợi ý\nKết luận\nViệc bổ sung trải nghiệm agentic của Amazon Q Developer vào Microsoft Visual Studio và JetBrains IDEs đưa Amazon Q Developer vượt xa khỏi các tương tác chat truyền thống đến hỗ trợ thông minh, định hướng hành động. Khả năng tự động đọc file, sinh code diffs, chạy shell commands, và xác thực các thay đổi thể hiện một mức độ tự chủ có thể tăng tốc đáng kể các nhiệm vụ phát triển trong khi vẫn duy trì chất lượng code. Các ví dụ mà chúng ta đã khám phá – từ tạo test tự động đến xử lý build errors – cho thấy cách trải nghiệm agentic có thể tối ưu hóa các tác vụ phát triển phổ biến vốn trước đây đòi hỏi nhiều bước thủ công. Khả năng mới này, kết hợp với hỗ trợ đa ngôn ngữ và các tiêu chuẩn phát triển tùy biến, biến Amazon Q Developer thành một đồng minh mạnh mẽ trong workflows phát triển phần mềm hiện đại. Khi các nhóm phát triển tiếp tục tìm cách cải thiện năng suất mà không làm giảm chất lượng code, trải nghiệm agentic của Amazon Q Developer đại diện cho một bước tiến có ý nghĩa trong IDE-integrated AI assistance. Cho dù bạn đang viết tests, sửa bugs, hay tối ưu code, khả năng có một AI assistant không chỉ gợi ý giải pháp mà còn có thể triển khai chúng trong khi vẫn duy trì nhận thức ngữ cảnh là một bổ sung thay đổi cuộc chơi cho bộ công cụ của lập trình viên.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/","title":"Nhật ký công việc","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nTrong trang này bạn sẽ cần giới thiệu worklog của bạn như thế nào? Bạn hoàn thành chương trình trong vòng bao nhiêu tuần? Bạn đã làm gì trong các tuần đó?\nThông thường và cũng là tiêu chuẩn, một worklog được thực hiện trong khoảng 3 tháng (trong suốt thời gian thực tập) với nội dung các tuần như sau:\nTuần 1: Làm quen với AWS và các dịch vụ cơ bản trong AWS\nTuần 2: Làm công việc A\u0026hellip;\nTuần 3: Làm công việc B\u0026hellip;\nTuần 4: Làm công việc C\u0026hellip;\nTuần 5: Làm công việc D\u0026hellip;\nTuần 6: Làm công việc E\u0026hellip;\nTuần 7: Làm công việc G\u0026hellip;\nTuần 8: Làm công việc H\u0026hellip;\nTuần 9: Làm công việc I\u0026hellip;\nTuần 10: Làm công việc L\u0026hellip;\nTuần 11: Làm công việc M\u0026hellip;\nTuần 12: Làm công việc N\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.3-s3-vpc/5.3.1-create-gwe/","title":"Tạo một Gateway Endpoint","tags":[],"description":"","content":" Mở Amazon VPC console Trong thanh điều hướng, chọn Endpoints, click Create Endpoint: Bạn sẽ thấy 6 điểm cuối VPC hiện có hỗ trợ AWS Systems Manager (SSM). Các điểm cuối này được Mẫu CloudFormation triển khai tự động cho workshop này.\nTrong Create endpoint console: Đặt tên cho endpoint: s3-gwe Trong service category, chọn aws services Trong Services, gõ \u0026ldquo;s3\u0026rdquo; trong hộp tìm kiếm và chọn dịch vụ với loại gateway Đối với VPC, chọn VPC Cloud từ drop-down menu. Đối với Route tables, chọn bảng định tuyến mà đã liên kết với 2 subnets (lưu ý: đây không phải là bảng định tuyến chính cho VPC mà là bảng định tuyến thứ hai do CloudFormation tạo). Đối với Policy, để tùy chọn mặc định là Full access để cho phép toàn quyền truy cập vào dịch vụ. Bạn sẽ triển khai VPC endpoint policy trong phần sau để chứng minh việc hạn chế quyền truy cập vào S3 bucket dựa trên các policies. Không thêm tag vào VPC endpoint. Click Create endpoint, click x sau khi nhận được thông báo tạo thành công. "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/3-blogstranslated/3.3-blog3/","title":"Trí tuệ Vị trí hướng tới Vận tải Bền vững trên AWS","tags":[],"description":"","content":"Xem bài viết gốc tại đây\nbởi Mahesh Geeniga, Lev Levine, và Nicolas Legros – 14 THÁNG 5 2025\nBởi Mahesh Geeniga, Senior Partner Solutions Architect – AWS, Lev Levine, Principal Partner Development Manager – AWS, Nicolas Legros, Director Product Marketing – HERE Technologies\nTrí tuệ vị trí (Location intelligence), được vận hành bởi dữ liệu địa lý theo thời gian thực, đang cách mạng hóa ngành vận tải và logistics bằng cách cho phép doanh nghiệp tối ưu hóa lộ trình, giảm tiêu thụ nhiên liệu, và giảm thiểu tác động môi trường trong khi vẫn đáp ứng nhu cầu ngày càng tăng của nền kinh tế toàn cầu.\nHERE Technologies, hợp tác cùng AWS, mang đến các giải pháp location intelligence tiên tiến, bao gồm smart routing, giám sát giao thông theo thời gian thực, và lập kế hoạch giao hàng last-mile tinh vi. Các giải pháp này giúp công ty giảm khí thải đồng thời tối ưu hóa việc giao hàng, quản lý đội xe, và hiệu suất tổng thể.\nTrong bài viết này, bạn sẽ khám phá cách mà các giải pháp bản đồ thế hệ tiếp theo của HERE trên AWS đang giúp doanh nghiệp đạt được mục tiêu bền vững. Các giải pháp này chứng minh rằng doanh nghiệp có thể duy trì hiệu quả vận hành đồng thời có trách nhiệm với môi trường.\nTối ưu Lộ trình Thông minh\nHERE Technologies, tiên phong trong lĩnh vực location intelligence, dựa vào hạ tầng AWS Cloud cho các giải pháp định tuyến và điều hướng tiên tiến, chẳng hạn như HERE Fleet Optimization. Các dịch vụ AWS, bao gồm Amazon S3, Amazon EC2, và AWS Batch, cho phép HERE xử lý lượng lớn dữ liệu thời gian thực và lịch sử, biến nó thành thông tin định tuyến tiên tiến.\nHERE Tour Planning API tối ưu hóa toàn bộ đội xe bằng cách tạo lộ trình tiết kiệm cả thời gian lẫn chi phí. Bằng cách sử dụng AWS Graviton processors, HERE cải thiện hiệu năng API đồng thời giảm chi phí cho khách hàng. API này tạo các tuyến cân bằng trong khi tối ưu hóa việc sử dụng phương tiện, bao gồm các ràng buộc vận hành khác nhau như ca làm của tài xế và yêu cầu thời gian công việc cụ thể. Nó có tính năng định tuyến theo thời gian thực nhận biết giao thông, được thiết kế riêng cho xe tải, với khả năng lập kế hoạch lại tuyến động dựa trên vị trí hiện tại của xe. API ghép các yêu cầu công việc cụ thể với khả năng của phương tiện một cách thông minh, ví dụ như vận chuyển cần làm lạnh, đồng thời phối hợp nhiều phương tiện để giảm tổng thời gian và nhiên liệu di chuyển. Thông qua việc xem xét khung giờ giao hàng nghiêm ngặt và điều kiện giao thông \u0026amp; đường xá theo thời gian thực, API cho phép hiệu suất giao hàng đáng tin cậy trong khi vẫn duy trì sự linh hoạt để thích ứng khi điều kiện thay đổi.\nHình 1 cho thấy cách HERE Fleet Optimization giải quyết nhiều vấn đề quản lý đội xe khác nhau.\nHình 1: Kiến trúc điển hình sử dụng HERE Fleet Optimization\nĐịnh tuyến Tập trung vào Lượng phát thải dựa trên Trí thông minh theo Thời gian thực\nHệ thống định tuyến tiên tiến của HERE biến đổi điều hướng truyền thống bằng cách cân bằng hiệu quả môi trường, chi phí, và tốc độ. Nó sử dụng các thuật toán mạnh mẽ để phân tích nhiều biến số thời gian thực nhằm xác định tuyến đường bền vững nhất cho mỗi chuyến đi. Cách tiếp cận thông minh này xem xét rằng ngay cả những biến động nhỏ trong mẫu giao thông, thông số phương tiện, hoặc điều kiện môi trường cũng có thể ảnh hưởng đến tiêu thụ nhiên liệu và khí thải.\nCác công cụ định tuyến tiên tiến liên tục xử lý dữ liệu giao thông thời gian thực và cung cấp thông tin định tuyến cập nhật thông qua APIs của HERE. Hệ thống quản lý đội xe sử dụng khả năng định tuyến của HERE có thể chủ động yêu cầu tính toán lại tuyến khi cần thiết, cho phép phản ứng với các thay đổi trong điều kiện đường (như thay đổi quy định giao thông), tai nạn, công trình xây dựng hoặc tình trạng đường khác. Bằng cách triển khai khả năng tái điều hướng và gọi APIs của HERE ở khoảng thời gian thích hợp, hệ thống có thể giúp phương tiện tránh tắc đường và giao thông dừng-đi. Cách tiếp cận này giảm thời gian chờ và tăng tốc không cần thiết – hai nguyên nhân chính gây ra khí thải dư thừa.\nViệc tích hợp HERE Real-Time Traffic và các tính năng cảnh báo đường đi giúp tăng cường hệ thống định tuyến thông minh. Các tính năng này cung cấp cập nhật nhanh về tình trạng đường và nguy hiểm tiềm tàng, cho phép phương tiện duy trì tốc độ ổn định và tránh các nút thắt giao thông. Các tùy chọn tuyến khác nhau có thể được đánh giá về hiệu quả nhiên liệu và tác động môi trường thông qua so sánh dự báo khí thải. Hệ thống đánh giá khí thải dự kiến cho các tùy chọn định tuyến khác nhau, so sánh tiêu thụ nhiên liệu và tác động môi trường. Một tuyến được đề xuất có thể trông dài hơn, nhưng khí thải dự báo lại thấp hơn do tránh được vùng tắc nghẽn, cuối cùng mang lại các lựa chọn tuyến đường hiệu quả về môi trường. Phương pháp định tuyến toàn diện này kết hợp dữ liệu giao thông thời gian thực với các đặc điểm riêng của từng phương tiện và các yếu tố môi trường. Bằng cách xem xét các biến số này, doanh nghiệp có thể giảm mức tiêu thụ nhiên liệu, thời gian chạy không tải và lượng khí thải carbon so với các phương pháp định vị truyền thống chỉ tập trung vào thời gian di chuyển hoặc khoảng cách.\nViễn thông Vận tải (Vehicle Telematics)\nHệ thống định tuyến của HERE có thể tích hợp với vehicle telematics để giám sát các chỉ số hiệu suất môi trường khi có quyền truy cập dữ liệu CAN bus. Hệ thống có thể phân tích nhiều khía cạnh quan trọng cho các đội xe với dữ liệu phương tiện kết nối, bao gồm dữ liệu tiêu thụ nhiên liệu thực tế từ phương tiện, các hành vi lái xe ảnh hưởng đến hiệu suất và cơ hội tối ưu hóa tuyến \u0026amp; lịch trình.\nKhả năng hiển thị này cho phép quản lý đội xe đưa ra quyết định dựa trên dữ liệu về hiệu quả định tuyến, đào tạo tài xế, và cải tiến vận hành. Các insight này giúp tổ chức đo lường và đạt mục tiêu giảm khí thải.\nGiải pháp Tăng cường Khả năng hiển thị\nGiao hàng chặng cuối (Last Mile Delivery) đặt ra những thách thức đặc thù trong môi trường đô thị, nơi giao thông phức tạp và thường xuyên dừng đỗ ảnh hưởng đáng kể đến lượng khí thải. Tính năng hiển thị lô hàng của HERE kết hợp dữ liệu từ nhiều nguồn theo dõi – bao gồm cảm biến IoT và hệ thống viễn thông – và tăng cường thông tin này với dữ liệu vị trí chính xác. Điều này mang đến cho khách hàng cái nhìn toàn diện về lô hàng của mình bằng cách tích hợp và làm giàu dữ liệu từ nhiều thiết bị và nền tảng theo dõi khác nhau. Quá trình nâng cao này ánh xạ thông tin vị trí đến các vị trí chính xác, cho phép theo dõi tình trạng giao hàng theo thời gian thực so với các tuyến đường và lịch trình đã định.\nNền tảng này đánh giá liệu các chuyến hàng đang chạy đúng giờ, chậm tiến độ hay vượt tiến độ, cho phép các nhà quản lý đội xe theo dõi toàn diện tiến độ giao hàng. Thông qua việc theo dõi vị trí xe và trạng thái giao hàng theo thời gian thực, các nhà quản lý có thể đánh giá việc tuân thủ lịch trình và hiệu suất giao hàng, đồng thời đánh giá sự tuân thủ lộ trình và các biến động thời gian. Khả năng hiển thị này cho phép họ thực hiện các điều chỉnh linh hoạt khi cần thiết để tối ưu hóa hiệu quả giao hàng trên toàn bộ hoạt động.\nKhả năng hiển thị nâng cao này cho phép các nhóm vận hành chủ động giải quyết sự chậm trễ, tối ưu hóa các quyết định về lộ trình và loại bỏ mức tiêu thụ nhiên liệu không cần thiết cho mỗi kiện hàng trên toàn bộ phân khúc giao hàng cuối cùng.\nQuyết định dựa trên thời tiết\nHERE Destination Weather là một dịch vụ động (trực tiếp) cung cấp thông tin thời tiết địa phương chi tiết, cập nhật từng phút, chính xác và theo ngữ cảnh, nhằm nâng cao nhận thức và sự an toàn cho tài xế. Dịch vụ này cung cấp thông tin về điều kiện thời tiết hiện tại, dự báo, cảnh báo thời tiết khắc nghiệt và các điều kiện thay đổi trong suốt hành trình. Bằng cách tích hợp dữ liệu thời tiết chi tiết này vào việc lập kế hoạch tuyến đường, các nhà quản lý đội xe có thể đưa ra quyết định sáng suốt hơn, tránh sự chậm trễ do thời tiết và chi phí nhiên liệu tăng cao. Phương pháp tiếp cận chủ động này giúp tối ưu hóa tuyến đường bằng cách xem xét tác động của thời tiết hiện tại và dự báo đối với điều kiện di chuyển.\nKết quả khách hàng có thể đo lường được\nViệc triển khai các giải pháp HERE đã chứng minh được giá trị đáng kể về mặt môi trường và kinh doanh, với mức độ lợi ích khác nhau tùy thuộc vào nền tảng của mỗi công ty. Đối với các tổ chức mới làm quen với việc tối ưu hóa tuyến đường dựa trên máy tính, các công nghệ này có thể giúp giảm tới 20% thời gian tuyến đường, chi phí nhiên liệu và lượng khí thải carbon thông qua việc lập kế hoạch tuyến đường và tối ưu hóa giao hàng hiệu quả. Các công ty đã sử dụng các giải pháp định tuyến số hóa cơ bản thường thấy mức tăng trưởng từ 5-8%, thậm chí có thể đạt tới 10%, khi nâng cấp lên các hệ thống tiên tiến hơn.\nKết luận\nBằng cách kết hợp dữ liệu không gian địa lý, thuật toán định tuyến tiên tiến và khả năng quản lý đội xe toàn diện, các doanh nghiệp giờ đây có thể đạt được các mục tiêu về môi trường mà không ảnh hưởng đến hiệu quả hoạt động. Khi các tổ chức trên toàn thế giới đang phải đối mặt với áp lực ngày càng tăng trong việc giảm thiểu tác động đến môi trường, nền tảng công nghệ của HERE, có sẵn trên AWS Marketplace, mang đến một lộ trình đã được chứng minh hướng đến hoạt động bền vững, đồng thời duy trì lợi thế cạnh tranh trong chuỗi cung ứng toàn cầu.\nHERE Location Services và HERE Tour Planning hiện có sẵn dưới dạng dịch vụ SaaS trên AWS Marketplace và có các gói dùng thử để giúp khách hàng kiểm tra các giải pháp. Truy cập trang web của HERE Technologies để tìm hiểu thêm.\nHERE Technologies–Đối tác tiêu biểu của AWS\nHERE Technologies, một Đối tác Chiến lược của AWS, cung cấp dữ liệu vị trí và nền tảng công nghệ được công nhận là hoàn thiện nhất trong ngành, giúp khách hàng tối ưu hóa việc giao hàng từ chặng đầu đến chặng cuối, xây dựng chuỗi cung ứng thế hệ mới với khả năng hiển thị lô hàng và tài sản, phát triển hệ thống lái xe tự động và cabin kỹ thuật số. HERE cho phép các đối tác và khách hàng đổi mới sáng tạo trong khi vẫn kiểm soát dữ liệu và bảo vệ quyền riêng tư. Khách hàng có thể truy cập các dịch vụ vị trí của HERE trực tiếp thông qua AWS Marketplace, giúp việc tích hợp bản đồ và thông tin vị trí vào các ứng dụng chạy trên nền tảng AWS của họ trở nên liền mạch.\nLiên hệ HERE | Tổng quan về Đối tác | AWS Marketplace\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.1-week1/","title":"Worklog Tuần 1","tags":[],"description":"","content":"Mục tiêu tuần 1: Kết nối, làm quen với các thành viên trong nhóm. Hiểu về AWS: các khái niệm, các dịch vụ điện toán đám mây, triết lý của AWS, v.v. Hoàn thành các bài Lab được đề cập trong Module 1. Các công việc cần triển khai trong tuần này: Ngày Nhiệm vụ On-site? Ngày bắt đầu Ngày hoàn thành Tài liệu tham khảo 1 - Đọc và ghi chú nội quy, quy định của đơn vị thực tập - Tạo tài khoản AWS mới và thiết lập thông tin thanh toán 08/09/2025 08/09/2025 2 - Làm quen với các thành viên FCJ - Đọc và ghi chú nội quy, quy định của đơn vị thực tập - Xem các bài giảng Module 01-0123 và hoàn thành Labs - Dọn dẹp tài nguyên ✅ 09/09/2025 09/09/2025 https://www.youtube.com/playlist?list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i https://000001.awsstudygroup.com https://000007.awsstudygroup.com/ https://000009.awsstudygroup.com/ 3 - Xem các bài giảng Module 01-0456 và hoàn thành Labs - Dọn dẹp tài nguyên - Tìm hiểu về AWS và các loại dịch vụ: + Compute + Storage + Networking + Database 10/09/2025 10/09/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo tài khoản AWS Free Tier - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo tài khoản AWS + Cài đặt \u0026amp; cấu hình AWS CLI + Cách sử dụng AWS CLI 11/09/2025 11/09/2025 https://cloudjourney.awsstudygroup.com/ 5 - Học cơ bản về EC2: + Loại instance + AMI + EBS - Phương thức kết nối SSH đến EC2 - Tìm hiểu về Elastic IP 12/09/2025 12/09/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Khởi chạy một EC2 instance + Kết nối qua SSH + Gắn thêm một EBS volume 13/09/2025 13/09/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 1: Nắm được những kiến thức về:\nĐiện toán đám mây là gì Hạ tầng toàn cầu của AWS Công cụ quản lý các dịch vụ AWS Tối ưu hóa chi phí trên AWS Làm việc với AWS Support Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database Đã tạo và nâng cấp tài khoản lên Paid Tier thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nHoàn thành các bài Lab được nhắc đến trong Module 1.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.2-week2/","title":"Worklog Tuần 2","tags":[],"description":"","content":"Mục tiêu Tuần 2: Hiểu sâu hơn về các nguyên tắc cơ bản về mạng AWS (VPC, Subnets, Route Tables, IGW). Học cách thiết kế và cấu hình VPC tùy chỉnh với cả public và private subnets. Thực hành quản lý kết nối: thiết lập route entries, gắn Internet Gateway, và liên kết Elastic IPs. Khám phá Elastic Network Interfaces (ENI) và VPC Endpoints để kết nối an toàn với các dịch vụ AWS. Củng cố kỹ năng kết hợp AWS Management Console và AWS CLI để quản lý tài nguyên song song. Các công việc cần thực hiện trong tuần này: Ngày Công việc On-site? Ngày Bắt đầu Ngày Hoàn thành Tài liệu Tham khảo 1 - Ôn tập quy định thực tập \u0026amp; thiết lập tài khoản AWS cơ bản - Tìm hiểu về hạ tầng toàn cầu AWS (Regions, Availability Zones, Edge Locations) ✅ 09/15/2025 2 - Giới thiệu về Amazon VPC và tại sao mạng lại quan trọng trong AWS - Hiểu về CIDR blocks và IPv4 vs IPv6 - Tạo VPC đơn giản với subnet mặc định 09/16/2025 3 - Tìm hiểu về Subnets (Public vs Private) - Các IP được bảo lưu trong subnets - Thực hành tạo nhiều subnets trong các Availability Zones khác nhau 09/17/2025 4 - Nghiên cứu Route Tables: mặc định vs tùy chỉnh - Cấu hình routes cho giao tiếp nội bộ VPC - Thêm route entry để cho phép truy cập internet (0.0.0.0/0 → IGW) 09/18/2025 5 - Tìm hiểu về Internet Gateway (IGW) và cách nó kết nối VPCs với internet - Khám phá Elastic IPs (EIP) và các cân nhắc về tính phí - Thực hành gắn EIP vào một instance EC2 09/19/2025 6 - Hiểu về Elastic Network Interfaces (ENI) và tính di động của chúng - Tìm hiểu về VPC Endpoints (Interface vs Gateway) - Khám phá các trường hợp sử dụng thực tế cho private vs public traffic 09/20/2025 Kết quả đạt được Tuần 2 Hiểu được các Dịch vụ Mạng AWS và vai trò của chúng trong hạ tầng cloud:\nAmazon VPC (Virtual Private Cloud) Subnets (Public \u0026amp; Private) Route Tables Internet Gateway (IGW) Elastic Network Interface (ENI) Elastic IP (EIP) VPC Endpoints (Interface \u0026amp; Gateway) Học cách tạo và cấu hình VPC:\nĐịnh nghĩa dải CIDR (10.10.0.0/16 cho VPC, 10.10.x.0/24 cho subnets). Phân biệt giữa public subnets (có routes IGW) và private subnets. Hiểu về việc bảo lưu IP trong subnet (network, broadcast, router, DNS, sử dụng tương lai). Thực hành làm việc với Route Tables:\nXác định route table mặc định và vai trò của nó trong giao tiếp nội bộ VPC. Tạo và chỉnh sửa các route tables tùy chỉnh. Thêm các route entries (ví dụ: 0.0.0.0/0 → IGW) để cho phép truy cập internet của public subnet. Khám phá Elastic Network Interface (ENI) và Elastic IP (EIP):\nHiểu rằng ENI có thể được di chuyển giữa các instance EC2 trong khi vẫn giữ IP và MAC. Liên kết Elastic IP tĩnh với ENI để có thể truy cập internet. Tìm hiểu về việc AWS tính phí cho các EIP không sử dụng để tránh lãng phí. Có kiến thức về Internet Gateway (IGW):\nVai trò là gateway có khả năng mở rộng ngang do AWS quản lý để kết nối internet. Các bước: Tạo IGW → Gắn vào VPC → Thêm route trong Route Table → Liên kết với Public Subnet. Hiểu cách tiếp cận đơn giản hóa so với các thiết bị mạng truyền thống. Phân tích Topo VPC bằng sơ đồ:\nXác định mối quan hệ giữa VPCs, Availability Zones, và subnets. Theo dõi kết nối EC2 thông qua ENI, Route Table, và IGW. Phân biệt cách private vs. public subnets tương tác với lưu lượng bên ngoài. Có được mô hình tinh thần rõ ràng về cách các thành phần mạng AWS kết hợp với nhau để hỗ trợ các kịch bản thực tế (web servers công cộng, cơ sở dữ liệu riêng tư, kết nối hybrid, v.v.).\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.3-week3/","title":"Worklog Tuần 3","tags":[],"description":"","content":"Mục tiêu Tuần 3 Hiểu cách hoạt động của các Amazon EC2 instance trong hạ tầng AWS. Học cách cấu hình và khởi chạy EC2 instance sử dụng AMI, Instance Types, và Key Pairs. Khám phá mối quan hệ giữa EC2, EBS volumes, và Instance Store. Thực hành tạo snapshot, gắn volume, và chiến lược backup. Học cách tự động hóa thiết lập EC2 sử dụng User Data và truy xuất Metadata để cấu hình instance. Có kiến thức cơ bản về EFS và FSx cho lưu trữ file có thể mở rộng và chia sẻ. Các công việc cần thực hiện trong tuần này Ngày Công việc On-site? Ngày 1 - Giới thiệu về Amazon EC2 - Hiểu cách hoạt động của ảo hóa: các lớp Hardware Node, Hypervisor, và EC2 Instance - Khám phá Instance Types và tác động của chúng đến hiệu năng CPU, Memory, và Network 09/22/2025 2 - Tìm hiểu về AMI (Amazon Machine Image): cách chọn và khởi chạy EC2 instance - Hiểu root volume mapping và tạo AMI tùy chỉnh - Nghiên cứu mô hình giá EC2 (On-demand, Reserved, Spot, Savings Plan) ✅ 09/23/2025 3 - Nghiên cứu Instance Store: lưu trữ tạm thời hiệu năng cao dựa trên NVMe - So sánh với EBS Volumes và thảo luận về tính bền vững, độ tin cậy, và sao chép - Thực hành khởi chạy instance với Instance Store và EBS 09/24/2025 4 - Tìm hiểu kiến trúc EBS (Elastic Block Store) và cách kết nối với EC2 qua EBS Network - Khám phá các loại EBS Volume (SSD, HDD) và độ bền (99.999%) - Thực hiện các thao tác snapshot và restore EBS 09/25/2025 5 - Hiểu về User Data và Metadata - Viết script user-data đơn giản để tự động cài đặt package và thiết lập - Truy xuất metadata EC2 (IP, hostname, security groups) sử dụng http://169.254.169.254/latest/meta-data/ 09/26/2025 6 - Khám phá các dịch vụ lưu trữ nâng cao: EFS (Elastic File System) và FSx - Tìm hiểu use case cho truy cập file chia sẻ và workload hiệu năng cao - Giới thiệu AWS Application Migration Service để di chuyển VM lên AWS 09/27/2025 Kết quả đạt được Tuần 3 Hiểu được kiến trúc EC2:\nEC2 instance chạy trên lớp hypervisor (Nitro/KVM) trên các node phần cứng vật lý. Mỗi instance sử dụng template AMI để định nghĩa OS và cấu hình. Có cái nhìn sâu sắc về cách instance types định nghĩa năng lực tính toán, bộ nhớ, và mạng. Tìm hiểu về Instance Store vs EBS:\nInstance Store cung cấp lưu trữ NVMe tạm thời, siêu nhanh gắn với node phần cứng. EBS cung cấp lưu trữ block bền vững được sao chép trên các storage node trong một AZ để đảm bảo tin cậy. Hiểu các use case: instance store cho workload IOPS cao, EBS cho độ bền. Khám phá kiến trúc và vận hành EBS:\nNghiên cứu cách EBS kết nối qua EBS Network chuyên dụng trong một Availability Zone. Tìm hiểu về các loại EBS volume (SSD, HDD), EBS-optimized instance, và hỗ trợ multi-attach. Thực hành tạo, gắn, tháo, và tạo snapshot để backup. Cấu hình EC2 instance và Key Pairs:\nTạo SSH key pair để truy cập an toàn. Kết nối đến EC2 qua public subnet sử dụng SSH. Hiểu về mã hóa key pair và liên kết với private/public subnet. Sử dụng User Data và Metadata để tự động hóa:\nViết bash script để cài đặt package và thiết lập môi trường khi khởi động. Truy cập metadata endpoint để lấy dữ liệu cấu hình (IP, hostname, SG). Học cách tự động hóa provisioning EC2 mà không cần thiết lập SSH thủ công. Làm quen với các dịch vụ lưu trữ cấp cao hơn:\nTổng quan về EFS cho hệ thống file POSIX chia sẻ giữa các instance. Tìm hiểu về FSx cho workload dựa trên Windows hoặc hiệu năng cao. Khám phá Application Migration Service như công cụ di chuyển workload lên AWS. Phát triển hiểu biết rõ ràng về cách các lớp compute và storage tương tác bên trong AWS Availability Zone, và cách chúng tạo nền tảng cho các dịch vụ cấp cao hơn.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.4-week4/","title":"Worklog Tuần 4","tags":[],"description":"","content":" Sẽ cập nhật sau.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.5-week5/","title":"Worklog Tuần 5","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 5: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 5: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.6-week6/","title":"Worklog Tuần 6","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 6: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 6: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.7-week7/","title":"Worklog Tuần 7","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 7: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 7: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.8-week8/","title":"Worklog Tuần 8","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 8: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 8: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.9-week9/","title":"Worklog Tuần 9","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 9: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 9: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/2-proposal/","title":"Bản đề xuất","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nTại phần này, bạn cần tóm tắt các nội dung trong workshop mà bạn dự tính sẽ làm.\nIoT Weather Platform for Lab Research Giải pháp AWS Serverless hợp nhất cho giám sát thời tiết thời gian thực 1. Tóm tắt điều hành IoT Weather Platform được thiết kế dành cho nhóm ITea Lab tại TP. Hồ Chí Minh nhằm nâng cao khả năng thu thập và phân tích dữ liệu thời tiết. Nền tảng hỗ trợ tối đa 5 trạm thời tiết, có khả năng mở rộng lên 10–15 trạm, sử dụng thiết bị biên Raspberry Pi kết hợp cảm biến ESP32 để truyền dữ liệu qua MQTT. Nền tảng tận dụng các dịch vụ AWS Serverless để cung cấp giám sát thời gian thực, phân tích dự đoán và tiết kiệm chi phí, với quyền truy cập giới hạn cho 5 thành viên phòng lab thông qua Amazon Cognito.\n2. Tuyên bố vấn đề Vấn đề hiện tại\nCác trạm thời tiết hiện tại yêu cầu thu thập dữ liệu thủ công, khó quản lý khi có nhiều trạm. Không có hệ thống tập trung cho dữ liệu hoặc phân tích thời gian thực, và các nền tảng bên thứ ba thường tốn kém và quá phức tạp.\nGiải pháp\nNền tảng sử dụng AWS IoT Core để tiếp nhận dữ liệu MQTT, AWS Lambda và API Gateway để xử lý, Amazon S3 để lưu trữ (bao gồm data lake), và AWS Glue Crawlers cùng các tác vụ ETL để trích xuất, chuyển đổi, tải dữ liệu từ S3 data lake sang một S3 bucket khác để phân tích. AWS Amplify với Next.js cung cấp giao diện web, và Amazon Cognito đảm bảo quyền truy cập an toàn. Tương tự như Thingsboard và CoreIoT, người dùng có thể đăng ký thiết bị mới và quản lý kết nối, nhưng nền tảng này hoạt động ở quy mô nhỏ hơn và phục vụ mục đích sử dụng nội bộ. Các tính năng chính bao gồm bảng điều khiển thời gian thực, phân tích xu hướng và chi phí vận hành thấp.\nLợi ích và hoàn vốn đầu tư (ROI)\nGiải pháp tạo nền tảng cơ bản để các thành viên phòng lab phát triển một nền tảng IoT lớn hơn, đồng thời cung cấp nguồn dữ liệu cho những người nghiên cứu AI phục vụ huấn luyện mô hình hoặc phân tích. Nền tảng giảm bớt báo cáo thủ công cho từng trạm thông qua hệ thống tập trung, đơn giản hóa quản lý và bảo trì, đồng thời cải thiện độ tin cậy dữ liệu. Chi phí hàng tháng ước tính 0,66 USD (theo AWS Pricing Calculator), tổng cộng 7,92 USD cho 12 tháng. Tất cả thiết bị IoT đã được trang bị từ hệ thống trạm thời tiết hiện tại, không phát sinh chi phí phát triển thêm. Thời gian hoàn vốn 6–12 tháng nhờ tiết kiệm đáng kể thời gian thao tác thủ công.\n3. Kiến trúc giải pháp Nền tảng áp dụng kiến trúc AWS Serverless để quản lý dữ liệu từ 5 trạm dựa trên Raspberry Pi, có thể mở rộng lên 15 trạm. Dữ liệu được tiếp nhận qua AWS IoT Core, lưu trữ trong S3 data lake và xử lý bởi AWS Glue Crawlers và ETL jobs để chuyển đổi và tải vào một S3 bucket khác cho mục đích phân tích. Lambda và API Gateway xử lý bổ sung, trong khi Amplify với Next.js cung cấp bảng điều khiển được bảo mật bởi Cognito.\nDịch vụ AWS sử dụng\nAWS IoT Core: Tiếp nhận dữ liệu MQTT từ 5 trạm, mở rộng lên 15. AWS Lambda: Xử lý dữ liệu và kích hoạt Glue jobs (2 hàm). Amazon API Gateway: Giao tiếp với ứng dụng web. Amazon S3: Lưu trữ dữ liệu thô (data lake) và dữ liệu đã xử lý (2 bucket). AWS Glue: Crawlers lập chỉ mục dữ liệu, ETL jobs chuyển đổi và tải dữ liệu. AWS Amplify: Lưu trữ giao diện web Next.js. Amazon Cognito: Quản lý quyền truy cập cho người dùng phòng lab. Thiết kế thành phần\nThiết bị biên: Raspberry Pi thu thập và lọc dữ liệu cảm biến, gửi tới IoT Core. Tiếp nhận dữ liệu: AWS IoT Core nhận tin nhắn MQTT từ thiết bị biên. Lưu trữ dữ liệu: Dữ liệu thô lưu trong S3 data lake; dữ liệu đã xử lý lưu ở một S3 bucket khác. Xử lý dữ liệu: AWS Glue Crawlers lập chỉ mục dữ liệu; ETL jobs chuyển đổi để phân tích. Giao diện web: AWS Amplify lưu trữ ứng dụng Next.js cho bảng điều khiển và phân tích thời gian thực. Quản lý người dùng: Amazon Cognito giới hạn 5 tài khoản hoạt động. 4. Triển khai kỹ thuật Các giai đoạn triển khai\nDự án gồm 2 phần — thiết lập trạm thời tiết biên và xây dựng nền tảng thời tiết — mỗi phần trải qua 4 giai đoạn:\nNghiên cứu và vẽ kiến trúc: Nghiên cứu Raspberry Pi với cảm biến ESP32 và thiết kế kiến trúc AWS Serverless (1 tháng trước kỳ thực tập). Tính toán chi phí và kiểm tra tính khả thi: Sử dụng AWS Pricing Calculator để ước tính và điều chỉnh (Tháng 1). Điều chỉnh kiến trúc để tối ưu chi phí/giải pháp: Tinh chỉnh (ví dụ tối ưu Lambda với Next.js) để đảm bảo hiệu quả (Tháng 2). Phát triển, kiểm thử, triển khai: Lập trình Raspberry Pi, AWS services với CDK/SDK và ứng dụng Next.js, sau đó kiểm thử và đưa vào vận hành (Tháng 2–3). Yêu cầu kỹ thuật\nTrạm thời tiết biên: Cảm biến (nhiệt độ, độ ẩm, lượng mưa, tốc độ gió), vi điều khiển ESP32, Raspberry Pi làm thiết bị biên. Raspberry Pi chạy Raspbian, sử dụng Docker để lọc dữ liệu và gửi 1 MB/ngày/trạm qua MQTT qua Wi-Fi. Nền tảng thời tiết: Kiến thức thực tế về AWS Amplify (lưu trữ Next.js), Lambda (giảm thiểu do Next.js xử lý), AWS Glue (ETL), S3 (2 bucket), IoT Core (gateway và rules), và Cognito (5 người dùng). Sử dụng AWS CDK/SDK để lập trình (ví dụ IoT Core rules tới S3). Next.js giúp giảm tải Lambda cho ứng dụng web fullstack. 5. Lộ trình \u0026amp; Mốc triển khai Trước thực tập (Tháng 0): 1 tháng lên kế hoạch và đánh giá trạm cũ. Thực tập (Tháng 1–3): Tháng 1: Học AWS và nâng cấp phần cứng. Tháng 2: Thiết kế và điều chỉnh kiến trúc. Tháng 3: Triển khai, kiểm thử, đưa vào sử dụng. Sau triển khai: Nghiên cứu thêm trong vòng 1 năm. 6. Ước tính ngân sách Có thể xem chi phí trên AWS Pricing Calculator\nHoặc tải tệp ước tính ngân sách.\nChi phí hạ tầng\nAWS Lambda: 0,00 USD/tháng (1.000 request, 512 MB lưu trữ). S3 Standard: 0,15 USD/tháng (6 GB, 2.100 request, 1 GB quét). Truyền dữ liệu: 0,02 USD/tháng (1 GB vào, 1 GB ra). AWS Amplify: 0,35 USD/tháng (256 MB, request 500 ms). Amazon API Gateway: 0,01 USD/tháng (2.000 request). AWS Glue ETL Jobs: 0,02 USD/tháng (2 DPU). AWS Glue Crawlers: 0,07 USD/tháng (1 crawler). MQTT (IoT Core): 0,08 USD/tháng (5 thiết bị, 45.000 tin nhắn). Tổng: 0,7 USD/tháng, 8,40 USD/12 tháng\nPhần cứng: 265 USD một lần (Raspberry Pi 5 và cảm biến). 7. Đánh giá rủi ro Ma trận rủi ro\nMất mạng: Ảnh hưởng trung bình, xác suất trung bình. Hỏng cảm biến: Ảnh hưởng cao, xác suất thấp. Vượt ngân sách: Ảnh hưởng trung bình, xác suất thấp. Chiến lược giảm thiểu\nMạng: Lưu trữ cục bộ trên Raspberry Pi với Docker. Cảm biến: Kiểm tra định kỳ, dự phòng linh kiện. Chi phí: Cảnh báo ngân sách AWS, tối ưu dịch vụ. Kế hoạch dự phòng\nQuay lại thu thập thủ công nếu AWS gặp sự cố. Sử dụng CloudFormation để khôi phục cấu hình liên quan đến chi phí. 8. Kết quả kỳ vọng Cải tiến kỹ thuật: Dữ liệu và phân tích thời gian thực thay thế quy trình thủ công. Có thể mở rộng tới 10–15 trạm.\nGiá trị dài hạn: Nền tảng dữ liệu 1 năm cho nghiên cứu AI, có thể tái sử dụng cho các dự án tương lai.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.2-prerequiste/","title":"Các bước chuẩn bị","tags":[],"description":"","content":"IAM permissions Gắn IAM permission policy sau vào tài khoản aws user của bạn để triển khai và dọn dẹp tài nguyên trong workshop này.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudformation:*\u0026#34;, \u0026#34;cloudwatch:*\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:AllocateAddress\u0026#34;, \u0026#34;ec2:AssociateAddress\u0026#34;, \u0026#34;ec2:AssociateIamInstanceProfile\u0026#34;, \u0026#34;ec2:AssociateRouteTable\u0026#34;, \u0026#34;ec2:AssociateSubnetCidrBlock\u0026#34;, \u0026#34;ec2:AssociateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:AssociateVpcCidrBlock\u0026#34;, \u0026#34;ec2:AttachInternetGateway\u0026#34;, \u0026#34;ec2:AttachNetworkInterface\u0026#34;, \u0026#34;ec2:AttachVolume\u0026#34;, \u0026#34;ec2:AttachVpnGateway\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:CreateClientVpnEndpoint\u0026#34;, \u0026#34;ec2:CreateClientVpnRoute\u0026#34;, \u0026#34;ec2:CreateCustomerGateway\u0026#34;, \u0026#34;ec2:CreateDhcpOptions\u0026#34;, \u0026#34;ec2:CreateFlowLogs\u0026#34;, \u0026#34;ec2:CreateInternetGateway\u0026#34;, \u0026#34;ec2:CreateLaunchTemplate\u0026#34;, \u0026#34;ec2:CreateNetworkAcl\u0026#34;, \u0026#34;ec2:CreateNetworkInterface\u0026#34;, \u0026#34;ec2:CreateNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:CreateRoute\u0026#34;, \u0026#34;ec2:CreateRouteTable\u0026#34;, \u0026#34;ec2:CreateSecurityGroup\u0026#34;, \u0026#34;ec2:CreateSubnet\u0026#34;, \u0026#34;ec2:CreateSubnetCidrReservation\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34;, \u0026#34;ec2:CreateTransitGateway\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRoute\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:CreateTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:CreateVpc\u0026#34;, \u0026#34;ec2:CreateVpcEndpoint\u0026#34;, \u0026#34;ec2:CreateVpcEndpointConnectionNotification\u0026#34;, \u0026#34;ec2:CreateVpcEndpointServiceConfiguration\u0026#34;, \u0026#34;ec2:CreateVpnConnection\u0026#34;, \u0026#34;ec2:CreateVpnConnectionRoute\u0026#34;, \u0026#34;ec2:CreateVpnGateway\u0026#34;, \u0026#34;ec2:DeleteCustomerGateway\u0026#34;, \u0026#34;ec2:DeleteFlowLogs\u0026#34;, \u0026#34;ec2:DeleteInternetGateway\u0026#34;, \u0026#34;ec2:DeleteNetworkInterface\u0026#34;, \u0026#34;ec2:DeleteNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:DeleteRoute\u0026#34;, \u0026#34;ec2:DeleteRouteTable\u0026#34;, \u0026#34;ec2:DeleteSecurityGroup\u0026#34;, \u0026#34;ec2:DeleteSubnet\u0026#34;, \u0026#34;ec2:DeleteSubnetCidrReservation\u0026#34;, \u0026#34;ec2:DeleteTags\u0026#34;, \u0026#34;ec2:DeleteTransitGateway\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRoute\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:DeleteVpc\u0026#34;, \u0026#34;ec2:DeleteVpcEndpoints\u0026#34;, \u0026#34;ec2:DeleteVpcEndpointServiceConfigurations\u0026#34;, \u0026#34;ec2:DeleteVpnConnection\u0026#34;, \u0026#34;ec2:DeleteVpnConnectionRoute\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:DetachInternetGateway\u0026#34;, \u0026#34;ec2:DisassociateAddress\u0026#34;, \u0026#34;ec2:DisassociateRouteTable\u0026#34;, \u0026#34;ec2:GetLaunchTemplateData\u0026#34;, \u0026#34;ec2:GetTransitGatewayAttachmentPropagations\u0026#34;, \u0026#34;ec2:ModifyInstanceAttribute\u0026#34;, \u0026#34;ec2:ModifySecurityGroupRules\u0026#34;, \u0026#34;ec2:ModifyTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:ModifyVpcAttribute\u0026#34;, \u0026#34;ec2:ModifyVpcEndpoint\u0026#34;, \u0026#34;ec2:ReleaseAddress\u0026#34;, \u0026#34;ec2:ReplaceRoute\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:RunInstances\u0026#34;, \u0026#34;ec2:StartInstances\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsEgress\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsIngress\u0026#34;, \u0026#34;iam:AddRoleToInstanceProfile\u0026#34;, \u0026#34;iam:AttachRolePolicy\u0026#34;, \u0026#34;iam:CreateInstanceProfile\u0026#34;, \u0026#34;iam:CreatePolicy\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:DeleteInstanceProfile\u0026#34;, \u0026#34;iam:DeletePolicy\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;iam:DetachRolePolicy\u0026#34;, \u0026#34;iam:GetInstanceProfile\u0026#34;, \u0026#34;iam:GetPolicy\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetRolePolicy\u0026#34;, \u0026#34;iam:ListPolicyVersions\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:PassRole\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:RemoveRoleFromInstanceProfile\u0026#34;, \u0026#34;lambda:CreateFunction\u0026#34;, \u0026#34;lambda:DeleteFunction\u0026#34;, \u0026#34;lambda:DeleteLayerVersion\u0026#34;, \u0026#34;lambda:GetFunction\u0026#34;, \u0026#34;lambda:GetLayerVersion\u0026#34;, \u0026#34;lambda:InvokeFunction\u0026#34;, \u0026#34;lambda:PublishLayerVersion\u0026#34;, \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:DeleteLogGroup\u0026#34;, \u0026#34;logs:DescribeLogGroups\u0026#34;, \u0026#34;logs:PutRetentionPolicy\u0026#34;, \u0026#34;route53:ChangeTagsForResource\u0026#34;, \u0026#34;route53:CreateHealthCheck\u0026#34;, \u0026#34;route53:CreateHostedZone\u0026#34;, \u0026#34;route53:CreateTrafficPolicy\u0026#34;, \u0026#34;route53:DeleteHostedZone\u0026#34;, \u0026#34;route53:DisassociateVPCFromHostedZone\u0026#34;, \u0026#34;route53:GetHostedZone\u0026#34;, \u0026#34;route53:ListHostedZones\u0026#34;, \u0026#34;route53domains:ListDomains\u0026#34;, \u0026#34;route53domains:ListOperations\u0026#34;, \u0026#34;route53domains:ListTagsForDomain\u0026#34;, \u0026#34;route53resolver:AssociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:AssociateResolverRule\u0026#34;, \u0026#34;route53resolver:CreateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:CreateResolverRule\u0026#34;, \u0026#34;route53resolver:DeleteResolverEndpoint\u0026#34;, \u0026#34;route53resolver:DeleteResolverRule\u0026#34;, \u0026#34;route53resolver:DisassociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:DisassociateResolverRule\u0026#34;, \u0026#34;route53resolver:GetResolverEndpoint\u0026#34;, \u0026#34;route53resolver:GetResolverRule\u0026#34;, \u0026#34;route53resolver:ListResolverEndpointIpAddresses\u0026#34;, \u0026#34;route53resolver:ListResolverEndpoints\u0026#34;, \u0026#34;route53resolver:ListResolverRuleAssociations\u0026#34;, \u0026#34;route53resolver:ListResolverRules\u0026#34;, \u0026#34;route53resolver:ListTagsForResource\u0026#34;, \u0026#34;route53resolver:UpdateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:UpdateResolverRule\u0026#34;, \u0026#34;s3:AbortMultipartUpload\u0026#34;, \u0026#34;s3:CreateBucket\u0026#34;, \u0026#34;s3:DeleteBucket\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34;, \u0026#34;s3:GetAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:GetBucketAcl\u0026#34;, \u0026#34;s3:GetBucketOwnershipControls\u0026#34;, \u0026#34;s3:GetBucketPolicy\u0026#34;, \u0026#34;s3:GetBucketPolicyStatus\u0026#34;, \u0026#34;s3:GetBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:GetObjectVersion\u0026#34;, \u0026#34;s3:GetBucketVersioning\u0026#34;, \u0026#34;s3:ListAccessPoints\u0026#34;, \u0026#34;s3:ListAccessPointsForObjectLambda\u0026#34;, \u0026#34;s3:ListAllMyBuckets\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:ListBucketMultipartUploads\u0026#34;, \u0026#34;s3:ListBucketVersions\u0026#34;, \u0026#34;s3:ListJobs\u0026#34;, \u0026#34;s3:ListMultipartUploadParts\u0026#34;, \u0026#34;s3:ListMultiRegionAccessPoints\u0026#34;, \u0026#34;s3:ListStorageLensConfigurations\u0026#34;, \u0026#34;s3:PutAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:PutBucketAcl\u0026#34;, \u0026#34;s3:PutBucketPolicy\u0026#34;, \u0026#34;s3:PutBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:PutObject\u0026#34;, \u0026#34;secretsmanager:CreateSecret\u0026#34;, \u0026#34;secretsmanager:DeleteSecret\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;secretsmanager:ListSecrets\u0026#34;, \u0026#34;secretsmanager:ListSecretVersionIds\u0026#34;, \u0026#34;secretsmanager:PutResourcePolicy\u0026#34;, \u0026#34;secretsmanager:TagResource\u0026#34;, \u0026#34;secretsmanager:UpdateSecret\u0026#34;, \u0026#34;sns:ListTopics\u0026#34;, \u0026#34;ssm:DescribeInstanceProperties\u0026#34;, \u0026#34;ssm:DescribeSessions\u0026#34;, \u0026#34;ssm:GetConnectionStatus\u0026#34;, \u0026#34;ssm:GetParameters\u0026#34;, \u0026#34;ssm:ListAssociations\u0026#34;, \u0026#34;ssm:ResumeSession\u0026#34;, \u0026#34;ssm:StartSession\u0026#34;, \u0026#34;ssm:TerminateSession\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Khởi tạo tài nguyên bằng CloudFormation Trong lab này, chúng ta sẽ dùng N.Virginia region (us-east-1).\nĐể chuẩn bị cho môi trường làm workshop, chúng ta deploy CloudFormation template sau (click link): PrivateLinkWorkshop . Để nguyên các lựa chọn mặc định.\nLựa chọn 2 mục acknowledgement Chọn Create stack Quá trình triển khai CloudFormation cần khoảng 15 phút để hoàn thành.\n2 VPCs đã được tạo 3 EC2s đã được tạo "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.3-s3-vpc/5.3.2-test-gwe/","title":"Kiểm tra Gateway Endpoint","tags":[],"description":"","content":"Tạo S3 bucket Đi đến S3 management console Trong Bucket console, chọn Create bucket Trong Create bucket console Đặt tên bucket: chọn 1 tên mà không bị trùng trong phạm vi toàn cầu (gợi ý: lab\u0026lt;số-lab\u0026gt;\u0026lt;tên-bạn\u0026gt;) Giữ nguyên giá trị của các fields khác (default) Kéo chuột xuống và chọn Create bucket Tạo thành công S3 bucket Kết nối với EC2 bằng session manager Trong workshop này, bạn sẽ dùng AWS Session Manager để kết nối đến các EC2 instances. Session Manager là 1 tính năng trong dịch vụ Systems Manager được quản lý hoàn toàn bởi AWS. System manager cho phép bạn quản lý Amazon EC2 instances và các máy ảo on-premises (VMs)thông qua 1 browser-based shell. Session Manager cung cấp khả năng quản lý phiên bản an toàn và có thể kiểm tra mà không cần mở cổng vào, duy trì máy chủ bastion host hoặc quản lý khóa SSH.\nFirst cloud journey Lab để hiểu sâu hơn về Session manager.\nTrong AWS Management Console, gõ Systems Manager trong ô tìm kiếm và nhấn Enter: Từ Systems Manager menu, tìm Node Management ở thanh bên trái và chọn Session Manager: Click Start Session, và chọn EC2 instance tên Test-Gateway-Endpoint. Phiên bản EC2 này đã chạy trong \u0026ldquo;VPC cloud\u0026rdquo; và sẽ được dùng để kiểm tra khả năng kết nối với Amazon S3 thông qua điểm cuối Cổng mà bạn vừa tạo (s3-gwe).\nSession Manager sẽ mở browser tab mới với shell prompt: sh-4.2 $\nBạn đã bắt đầu phiên kết nối đến EC2 trong VPC Cloud thành công. Trong bước tiếp theo, chúng ta sẽ tạo một S3 bucket và một tệp trong đó.\nCreate a file and upload to s3 bucket Đổi về ssm-user\u0026rsquo;s thư mục bằng lệnh \u0026ldquo;cd ~\u0026rdquo; Tạo 1 file để kiểm tra bằng lệnh \u0026ldquo;fallocate -l 1G testfile.xyz\u0026rdquo;, 1 file tên \u0026ldquo;testfile.xyz\u0026rdquo; có kích thước 1GB sẽ được tạo. Tải file mình vừa tạo lên S3 với lệnh \u0026ldquo;aws s3 cp testfile.xyz s3://your-bucket-name\u0026rdquo;. Thay your-bucket-name bằng tên S3 bạn đã tạo. Bạn đã tải thành công tệp lên bộ chứa S3 của mình. Bây giờ bạn có thể kết thúc session.\nKiểm tra object trong S3 bucket Đi đến S3 console. Click tên s3 bucket của bạn Trong Bucket console, bạn sẽ thấy tệp bạn đã tải lên S3 bucket của mình Tóm tắt Chúc mừng bạn đã hoàn thành truy cập S3 từ VPC. Trong phần này, bạn đã tạo gateway endpoint cho Amazon S3 và sử dụng AWS CLI để tải file lên. Quá trình tải lên hoạt động vì gateway endpoint cho phép giao tiếp với S3 mà không cần Internet gateway gắn vào \u0026ldquo;VPC Cloud\u0026rdquo;. Điều này thể hiện chức năng của gateway endpoint như một đường dẫn an toàn đến S3 mà không cần đi qua pub lic Internet.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.4-s3-onprem/5.4.2-create-interface-enpoint/","title":"Tạo một S3 Interface endpoint","tags":[],"description":"","content":"Trong phần này, bạn sẽ tạo và kiểm tra Interface Endpoint S3 bằng cách sử dụng môi trường truyền thống mô phỏng.\nQuay lại Amazon VPC menu. Trong thanh điều hướng bên trái, chọn Endpoints, sau đó click Create Endpoint.\nTrong Create endpoint console:\nĐặt tên interface endpoint Trong Service category, chọn aws services Trong Search box, gõ S3 và nhấn Enter. Chọn endpoint có tên com.amazonaws.us-east-1.s3. Đảm bảo rằng cột Type có giá trị Interface. Đối với VPC, chọn VPC Cloud từ drop-down. Đảm bảo rằng bạn chọn \u0026ldquo;VPC Cloud\u0026rdquo; và không phải \u0026ldquo;VPC On-prem\u0026rdquo;\nMở rộng Additional settings và đảm bảo rằng Enable DNS name không được chọn (sẽ sử dụng điều này trong phần tiếp theo của workshop) Chọn 2 subnets trong AZs sau: us-east-1a and us-east-1b Đối với Security group, chọn SGforS3Endpoint: Giữ default policy - full access và click Create endpoint Chúc mừng bạn đã tạo thành công S3 interface endpoint. Ở bước tiếp theo, chúng ta sẽ kiểm tra interface endpoint.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.10-week10/","title":"Worklog Tuần 10","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 10: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 10: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.11-week11/","title":"Worklog Tuần 11","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 11: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 11: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/1-worklog/1.12-week12/","title":"Worklog Tuần 12","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nMục tiêu tuần 12: Kết nối, làm quen với các thành viên trong First Cloud Journey. Hiểu dịch vụ AWS cơ bản, cách dùng console \u0026amp; CLI. Các công việc cần triển khai trong tuần này: Thứ Công việc Ngày bắt đầu Ngày hoàn thành Nguồn tài liệu 2 - Làm quen với các thành viên FCJ - Đọc và lưu ý các nội quy, quy định tại đơn vị thực tập 11/08/2025 11/08/2025 3 - Tìm hiểu AWS và các loại dịch vụ + Compute + Storage + Networking + Database + \u0026hellip; 12/08/2025 12/08/2025 https://cloudjourney.awsstudygroup.com/ 4 - Tạo AWS Free Tier account - Tìm hiểu AWS Console \u0026amp; AWS CLI - Thực hành: + Tạo AWS account + Cài AWS CLI \u0026amp; cấu hình + Cách sử dụng AWS CLI 13/08/2025 13/08/2025 https://cloudjourney.awsstudygroup.com/ 5 - Tìm hiểu EC2 cơ bản: + Instance types + AMI + EBS + \u0026hellip; - Các cách remote SSH vào EC2 - Tìm hiểu Elastic IP 14/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ 6 - Thực hành: + Tạo EC2 instance + Kết nối SSH + Gắn EBS volume 15/08/2025 15/08/2025 https://cloudjourney.awsstudygroup.com/ Kết quả đạt được tuần 12: Hiểu AWS là gì và nắm được các nhóm dịch vụ cơ bản:\nCompute Storage Networking Database \u0026hellip; Đã tạo và cấu hình AWS Free Tier account thành công.\nLàm quen với AWS Management Console và biết cách tìm, truy cập, sử dụng dịch vụ từ giao diện web.\nCài đặt và cấu hình AWS CLI trên máy tính bao gồm:\nAccess Key Secret Key Region mặc định \u0026hellip; Sử dụng AWS CLI để thực hiện các thao tác cơ bản như:\nKiểm tra thông tin tài khoản \u0026amp; cấu hình Lấy danh sách region Xem dịch vụ EC2 Tạo và quản lý key pair Kiểm tra thông tin dịch vụ đang chạy \u0026hellip; Có khả năng kết nối giữa giao diện web và CLI để quản lý tài nguyên AWS song song.\n\u0026hellip;\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/3-blogstranslated/","title":"Các bài blogs đã dịch","tags":[],"description":"","content":"Định tuyến động các request với routing rules của Amazon API Gateway Bài viết này khám phá tính năng quy tắc định tuyến động mới của Amazon API Gateway cho tên miền tùy chỉnh. Nó giải thích cách các tổ chức hiện có thể định tuyến các yêu cầu API dựa trên giá trị header HTTP và đường dẫn URL mà không cần sửa đổi các endpoint hiện có.\nGiới thiệu trải nghiệm lập trình với trí tuệ nhân tạo hành động độc lập trong Visual Studio và JetBrains IDEs Bài viết này giới thiệu trải nghiệm lập trình agentic mới của Amazon Q Developer cho Visual Studio và JetBrains IDEs, mở rộng ra ngoài hỗ trợ VS Code ban đầu. Tính năng agentic hoạt động chủ động để tự động hóa các tác vụ phát triển lặp đi lặp lại như gỡ lỗi, tạo unit test và xác thực quy trình build. Khác với các trợ lý AI dựa trên chat truyền thống, Amazon Q Developer có thể tự động phân tích workspace, tạo code sửa lỗi, thực thi lệnh và xác thực các thay đổi mà không yêu cầu developer rời khỏi IDE.\nTrí tuệ Vị trí hướng tới Vận tải Bền vững trên AWS Bài viết này khám phá cách HERE Technologies và AWS đang chuyển đổi giao thông vận tải và logistics thông qua các giải pháp trí tuệ vị trí tập trung vào tính bền vững. Bài viết trình bày cách dữ liệu địa lý không gian thời gian thực và các thuật toán định tuyến tiên tiến giúp doanh nghiệp tối ưu hóa tuyến đường, giảm tiêu thụ nhiên liệu và giảm thiểu tác động môi trường trong khi duy trì hiệu quả hoạt động.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.4-s3-onprem/5.4.3-test-endpoint/","title":"Kiểm tra Interface Endpoint","tags":[],"description":"","content":"Lấy regional DNS name (tên DNS khu vực) của S3 interface endpoint Trong Amazon VPC menu, chọn Endpoints.\nClick tên của endpoint chúng ta mới tạo ở mục 4.2: s3-interface-endpoint. Click details và lưu lại regional DNS name của endpoint (cái đầu tiên) vào text-editor của bạn để dùng ở các bước sau.\nKết nối đến EC2 instance ở trong \u0026ldquo;VPC On-prem\u0026rdquo; (giả lập môi trường truyền thống) Đi đến Session manager bằng cách gõ \u0026ldquo;session manager\u0026rdquo; vào ô tìm kiếm\nClick Start Session, chọn EC2 instance có tên Test-Interface-Endpoint. EC2 instance này đang chạy trên \u0026ldquo;VPC On-prem\u0026rdquo; và sẽ được sử dụng để kiểm tra kết nối đến Amazon S3 thông qua Interface endpoint. Session Manager sẽ mở 1 browser tab mới với shell prompt: sh-4.2 $\nĐi đến ssm-user\u0026rsquo;s home directory với lệnh \u0026ldquo;cd ~\u0026rdquo;\nTạo 1 file tên testfile2.xyz\nfallocate -l 1G testfile2.xyz Copy file vào S3 bucket mình tạo ở section 4.2 aws s3 cp --endpoint-url https://bucket.\u0026lt;Regional-DNS-Name\u0026gt; testfile2.xyz s3://\u0026lt;your-bucket-name\u0026gt; Câu lệnh này yêu cầu thông số \u0026ndash;endpoint-url, bởi vì bạn cần sử dụng DNS name chỉ định cho endpoint để truy cập vào S3 thông qua Interface endpoint. Không lấy \u0026rsquo; * \u0026rsquo; khi copy/paste tên DNS khu vực. Cung cấp tên S3 bucket của bạn Bây giờ tệp đã được thêm vào bộ chứa S3 của bạn. Hãy kiểm tra bộ chứa S3 của bạn trong bước tiếp theo.\nKiểm tra Object trong S3 bucket Đi đến S3 console Click Buckets Click tên bucket của bạn và bạn sẽ thấy testfile2.xyz đã được thêm vào s3 bucket của bạn "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.3-s3-vpc/","title":"Truy cập S3 từ VPC","tags":[],"description":"","content":"Sử dụng Gateway endpoint Trong phần này, bạn sẽ tạo một Gateway endpoint để truy cập Amazon S3 từ một EC2 instance. Gateway endpoint sẽ cho phép tải một object lên S3 bucket mà không cần sử dụng Internet Công cộng. Để tạo endpoint, bạn phải chỉ định VPC mà bạn muốn tạo endpoint và dịch vụ (trong trường hợp này là S3) mà bạn muốn thiết lập kết nối.\nNội dung Tạo gateway endpoint Test gateway endpoint "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/4-eventparticipated/","title":"Các events đã tham gia","tags":[],"description":"","content":" Trong quá trình thực tập, em đã tham gia 2 events, với mỗi event là một trải nghiệm đáng nhớ với những kiến thức mới, hay và bổ ích, cùng với đó là nhứng món quà và những khoảnh khắc rất tuyệt vời.\nEvent 1 Tên sự kiện: AWS Cloud Day Vietnam 2025 - AI Edition (Phát trực tiếp \u0026amp; các phiên chuyên đề)\nThời gian: 09:00 - 16:00, ngày 19/09/2025\nĐịa điểm: Tầng 26, tòa nhà Bitexco, số 02 đường Hải Triều, phường Sài Gòn, thành phố Hồ Chí Minh\nVai trò: Người tham dự\nEvent 2 Tên sự kiện: Data Science on AWS - Workshop\nThời gian: 09:30 - 11:45, ngày 16/10/2025\nĐịa điểm: Hội trường, Trường Đại học FPT, số 7 Đường D1, Phường Long Bình, Thành phố Hồ Chí Minh\nVai trò: Người tham dự\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.4-s3-onprem/5.4.4-dns-simulation/","title":"Mô phỏng On-premises DNS ","tags":[],"description":"","content":"AWS PrivateLink endpoint có một địa chỉ IP cố định trong từng AZ nơi chúng được triển khai, trong suốt thời gian tồn tại của endpoint (cho đến khi endpoint bị xóa). Các địa chỉ IP này được gắn vào Elastic network interface (ENI). AWS khuyến nghị sử dụng DNS để resolve địa chỉ IP cho endpoint để các ứng dụng downstream sử dụng địa chỉ IP mới nhất khi ENIs được thêm vào AZ mới hoặc bị xóa theo thời gian.\nTrong phần này, bạn sẽ tạo một quy tắc chuyển tiếp (forwarding rule) để gửi các yêu cầu resolve DNS từ môi trường truyền thống (mô phỏng) đến Private Hosted Zone trên Route 53. Phần này tận dụng cơ sở hạ tầng do CloudFormation triển khai trong phần Chuẩn bị môi trường.\nTạo DNS Alias Records cho Interface endpoint Click link để đi đến Route 53 management console (Hosted Zones section). Mẫu CloudFormation mà bạn triển khai trong phần Chuẩn bị môi trường đã tạo Private Hosted Zone này. Nhấp vào tên của Private Hosted Zone, s3.us-east-1.amazonaws.com: Tạo 1 record mới trong Private Hosted Zone: Giữ nguyên Record name và record type Alias Button: click để enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Chọn endpoint: Paste tên (Regional VPC Endpoint DNS) bạn đã lưu lại ở phần 4.3 Click Add another record, và add 1 cái record thứ 2 sử dụng những thông số sau: Record name: *. Record type: giữ giá trị default (type A) Alias Button: Click để enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Chọn endpoint: Paste tên (Regional VPC Endpoint DNS) bạn đã lưu lại ở phần 4.3 Click Create records Record mới xuất hiện trên giao diện Route 53.\nTạo một Resolver Forwarding Rule Route 53 Resolver Forwarding Rules cho phép bạn chuyển tiếp các DNS queries từ VPC của bạn đến các nguồn khác để resolve name. Bên ngoài môi trường workshop, bạn có thể sử dụng tính năng này để chuyển tiếp các DNS queries từ VPC của bạn đến các máy chủ DNS chạy trên on-premises. Trong phần này, bạn sẽ mô phỏng một on-premises conditional forwarder bằng cách tạo một forwarding rule để chuyển tiếp các DNS queries for Amazon S3 đến một Private Hosted Zone chạy trong \u0026ldquo;VPC Cloud\u0026rdquo; để resolve PrivateLink interface endpoint regional DNS name.\nTừ giao diện Route 53, chọn Inbound endpoints trên thanh bên trái\nTrong giao diện Inbound endpoint, Chọn ID của Inbound endpoint.\nSao chép 2 địa chỉ IP trong danh sách vào trình chỉnh sửa. Từ giao diện Route 53, chọn Resolver \u0026gt; Rules và chọn Create rule Trong giao diện Create rule Name: myS3Rule Rule type: Forward Domain name: s3.us-east-1.amazonaws.com VPC: VPC On-prem Outbound endpoint: VPCOnpremOutboundEndpoint Target IP Addresses: điền cả hai IP bạn đã lưu trữ trên trình soạn thảo (inbound endpoint addresses) và sau đó chọn Submit Bạn đã tạo thành công resolver forwarding rule.\nKiểm tra on-premises DNS mô phỏng. Kết nối đến Test-Interface-Endpoint EC2 instance với Session Manager Kiểm tra DNS resolution. Lệnh dig sẽ trả về địa chỉ IP được gán cho VPC endpoint interface đang chạy trên VPC (địa chỉ IP của bạn sẽ khác): dig +short s3.us-east-1.amazonaws.com Các địa chỉ IP được trả về là các địa chỉ IP VPC enpoint, KHÔNG phải là các địa chỉ IP Resolver mà bạn đã dán từ trình chỉnh sửa văn bản của mình. Các địa chỉ IP của Resolver endpoint và VPC endpoin trông giống nhau vì chúng đều từ khối CIDR VPC Cloud.\nTruy cập vào menu VPC (phần Endpoints), chọn S3 interface endpoint. Nhấp vào tab Subnets và xác nhận rằng các địa chỉ IP được trả về bởi lệnh Dig khớp với VPC endpoint: Hãy quay lại shell của bạn và sử dụng AWS CLI để kiểm tra danh sách các bucket S3 của bạn: aws s3 ls --endpoint-url https://s3.us-east-1.amazonaws.com Kết thúc phiên làm việc của Session Manager của bạn: Trong phần này, bạn đã tạo một Interface Endpoint cho Amazon S3. Điểm cuối này có thể được truy cập từ on-premises thông qua Site-to-Site VPN hoặc AWS Direct Connect. Các điểm cuối Route 53 Resolver outbound giả lập chuyển tiếp các yêu cầu DNS từ on-premises đến một Private Hosted Zone đang chạy trên đám mây. Các điểm cuối Route 53 inbound nhận yêu cầu giải quyết và trả về một phản hồi chứa địa chỉ IP của Interface Endpoint VPC. Sử dụng DNS để giải quyết các địa chỉ IP của điểm cuối cung cấp tính sẵn sàng cao trong trường hợp một Availability Zone gặp sự cố.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.4-s3-onprem/","title":"Truy cập S3 từ môi trường truyền thống","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ tạo một Interface Endpoint để truy cập Amazon S3 từ môi trường truyền thống mô phỏng. Interface Endpoint sẽ cho phép bạn định tuyến đến Amazon S3 qua kết nối VPN từ môi trường truyền thống mô phỏng của bạn.\nTại sao nên sử dụng Interface Endpoint:\nCác Gateway endpoints chỉ hoạt động với các tài nguyên đang chạy trong VPC nơi chúng được tạo. Interface Endpoint hoạt động với tài nguyên chạy trong VPC và cả tài nguyên chạy trong môi trường truyền thống. Khả năng kết nối từ môi trường truyền thống của bạn với aws cloud có thể được cung cấp bởi AWS Site-to-Site VPN hoặc AWS Direct Connect. Interface Endpoint cho phép bạn kết nối với các dịch vụ do AWS PrivateLink cung cấp. Các dịch vụ này bao gồm một số dịch vụ AWS, dịch vụ do các đối tác và khách hàng AWS lưu trữ trong VPC của riêng họ (gọi tắt là Dịch vụ PrivateLink endpoints) và các dịch vụ Đối tác AWS Marketplace. Đối với workshop này, chúng ta sẽ tập trung vào việc kết nối với Amazon S3. "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.5-policy/","title":"VPC Endpoint Policies","tags":[],"description":"","content":"Khi bạn tạo một Interface Endpoint hoặc cổng, bạn có thể đính kèm một chính sách điểm cuối để kiểm soát quyền truy cập vào dịch vụ mà bạn đang kết nối. Chính sách VPC Endpoint là chính sách tài nguyên IAM mà bạn đính kèm vào điểm cuối. Nếu bạn không đính kèm chính sách khi tạo điểm cuối, thì AWS sẽ đính kèm chính sách mặc định cho bạn để cho phép toàn quyền truy cập vào dịch vụ thông qua điểm cuối.\nBạn có thể tạo chính sách chỉ hạn chế quyền truy cập vào các S3 bucket cụ thể. Điều này hữu ích nếu bạn chỉ muốn một số Bộ chứa S3 nhất định có thể truy cập được thông qua điểm cuối.\nTrong phần này, bạn sẽ tạo chính sách VPC Endpoint hạn chế quyền truy cập vào S3 bucket được chỉ định trong chính sách VPC Endpoint.\nKết nối tới EC2 và xác minh kết nối tới S3. Bắt đầu một phiên AWS Session Manager mới trên máy chủ có tên là Test-Gateway-Endpoint. Từ phiên này, xác minh rằng bạn có thể liệt kê nội dung của bucket mà bạn đã tạo trong Phần 1: Truy cập S3 từ VPC. aws s3 ls s3://\u0026lt;your-bucket-name\u0026gt; Nội dung của bucket bao gồm hai tệp có dung lượng 1GB đã được tải lên trước đó.\nTạo một bucket S3 mới; tuân thủ mẫu đặt tên mà bạn đã sử dụng trong Phần 1, nhưng thêm \u0026lsquo;-2\u0026rsquo; vào tên. Để các trường khác là mặc định và nhấp vào Create. Tạo bucket thành công. Policy mặc định cho phép truy cập vào tất cả các S3 Buckets thông qua VPC endpoint.\nTrong giao diện Edit Policy, sao chép và dán theo policy sau, thay thế yourbucketname-2 với tên bucket thứ hai của bạn. Policy này sẽ cho phép truy cập đến bucket mới thông qua VPC endpoint, nhưng không cho phép truy cập đến các bucket còn lại. Chọn Save để kích hoạt policy. { \u0026#34;Id\u0026#34;: \u0026#34;Policy1631305502445\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Stmt1631305501021\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::yourbucketname-2\u0026#34;, \u0026#34;arn:aws:s3:::yourbucketname-2/*\u0026#34; ], \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34; } ] } Cấu hình policy thành công.\nTừ session của bạn trên Test-Gateway-Endpoint instance, kiểm tra truy cập đến S3 bucket bạn tạo ở bước đầu aws s3 ls s3://\u0026lt;yourbucketname\u0026gt; Câu lệnh trả về lỗi bởi vì truy cập vào S3 bucket không có quyền trong VPC endpoint policy.\nTrở lại home directory của bạn trên EC2 instance cd~ Tạo file fallocate -l 1G test-bucket2.xyz Sao chép file lên bucket thứ 2 aws s3 cp test-bucket2.xyz s3://\u0026lt;your-2nd-bucket-name\u0026gt; Thao tác này được cho phép bởi VPC endpoint policy.\nSau đó chúng ta kiểm tra truy cập vào S3 bucket đầu tiên\naws s3 cp test-bucket2.xyz s3://\u0026lt;your-1st-bucket-name\u0026gt;\nCâu lệnh xảy ra lỗi bởi vì bucket không có quyền truy cập bởi VPC endpoint policy.\nTrong phần này, bạn đã tạo chính sách VPC Endpoint cho Amazon S3 và sử dụng AWS CLI để kiểm tra chính sách. Các hoạt động AWS CLI liên quan đến bucket S3 ban đầu của bạn thất bại vì bạn áp dụng một chính sách chỉ cho phép truy cập đến bucket thứ hai mà bạn đã tạo. Các hoạt động AWS CLI nhắm vào bucket thứ hai của bạn thành công vì chính sách cho phép chúng. Những chính sách này có thể hữu ích trong các tình huống khi bạn cần kiểm soát quyền truy cập vào tài nguyên thông qua VPC Endpoint.\n"},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/","title":"Workshop","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nĐảm bảo truy cập Hybrid an toàn đến S3 bằng cách sử dụng VPC endpoint Tổng quan AWS PrivateLink cung cấp kết nối riêng tư đến các dịch vụ aws từ VPCs hoặc trung tâm dữ liệu (on-premise) mà không làm lộ lưu lượng truy cập ra ngoài public internet.\nTrong bài lab này, chúng ta sẽ học cách tạo, cấu hình, và kiểm tra VPC endpoints để cho phép workload của bạn tiếp cận các dịch vụ AWS mà không cần đi qua Internet công cộng.\nChúng ta sẽ tạo hai loại endpoints để truy cập đến Amazon S3: gateway vpc endpoint và interface vpc endpoint. Hai loại vpc endpoints này mang đến nhiều lợi ích tùy thuộc vào việc bạn truy cập đến S3 từ môi trường cloud hay từ trung tâm dữ liệu (on-premise).\nGateway - Tạo gateway endpoint để gửi lưu lượng đến Amazon S3 hoặc DynamoDB using private IP addresses. Bạn điều hướng lưu lượng từ VPC của bạn đến gateway endpoint bằng các bảng định tuyến (route tables) Interface - Tạo interface endpoint để gửi lưu lượng đến các dịch vụ điểm cuối (endpoints) sử dụng Network Load Balancer để phân phối lưu lượng. Lưu lượng dành cho dịch vụ điểm cuối được resolved bằng DNS. Nội dung Tổng quan về workshop Chuẩn bị Truy cập đến S3 từ VPC Truy cập đến S3 từ TTDL On-premises VPC Endpoint Policies (làm thêm) Dọn dẹp tài nguyên "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/5-workshop/5.6-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Dọn dẹp tài nguyên Xin chúc mừng bạn đã hoàn thành xong lab này! Trong lab này, bạn đã học về các mô hình kiến trúc để truy cập Amazon S3 mà không sử dụng Public Internet.\nBằng cách tạo Gateway endpoint, bạn đã cho phép giao tiếp trực tiếp giữa các tài nguyên EC2 và Amazon S3, mà không đi qua Internet Gateway. Bằng cách tạo Interface endpoint, bạn đã mở rộng kết nối S3 đến các tài nguyên chạy trên trung tâm dữ liệu trên chỗ của bạn thông qua AWS Site-to-Site VPN hoặc Direct Connect. Dọn dẹp Điều hướng đến Hosted Zones trên phía trái của bảng điều khiển Route 53. Nhấp vào tên của s3.us-east-1.amazonaws.com zone. Nhấp vào Delete và xác nhận việc xóa bằng cách nhập từ khóa \u0026ldquo;delete\u0026rdquo;. Disassociate Route 53 Resolver Rule - myS3Rule from \u0026ldquo;VPC Onprem\u0026rdquo; and Delete it. 4.Mở console của CloudFormation và xóa hai stack CloudFormation mà bạn đã tạo cho bài thực hành này:\nPLOnpremSetup PLCloudSetup Xóa các S3 bucket Mở bảng điều khiển S3 Chọn bucket chúng ta đã tạo cho lab, nhấp chuột và xác nhận là empty. Nhấp Delete và xác nhận delete. "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/6-self-evaluation/","title":"Tự đánh giá","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nTrong suốt thời gian thực tập tại [Tên công ty/tổ chức] từ [ngày bắt đầu] đến [ngày kết thúc], tôi đã có cơ hội học hỏi, rèn luyện và áp dụng kiến thức đã được trang bị tại trường vào môi trường làm việc thực tế.\nTôi đã tham gia [mô tả ngắn gọn dự án hoặc công việc chính], qua đó cải thiện kỹ năng [liệt kê kỹ năng: lập trình, phân tích, viết báo cáo, giao tiếp…].\nVề tác phong, tôi luôn cố gắng hoàn thành tốt nhiệm vụ, tuân thủ nội quy, và tích cực trao đổi với đồng nghiệp để nâng cao hiệu quả công việc.\nĐể phản ánh một cách khách quan quá trình thực tập, tôi xin tự đánh giá bản thân dựa trên các tiêu chí dưới đây:\nSTT Tiêu chí Mô tả Tốt Khá Trung bình 1 Kiến thức và kỹ năng chuyên môn Hiểu biết về ngành, áp dụng kiến thức vào thực tế, kỹ năng sử dụng công cụ, chất lượng công việc ✅ ☐ ☐ 2 Khả năng học hỏi Tiếp thu kiến thức mới, học hỏi nhanh ☐ ✅ ☐ 3 Chủ động Tự tìm hiểu, nhận nhiệm vụ mà không chờ chỉ dẫn ✅ ☐ ☐ 4 Tinh thần trách nhiệm Hoàn thành công việc đúng hạn, đảm bảo chất lượng ✅ ☐ ☐ 5 Kỷ luật Tuân thủ giờ giấc, nội quy, quy trình làm việc ☐ ☐ ✅ 6 Tính cầu tiến Sẵn sàng nhận feedback và cải thiện bản thân ☐ ✅ ☐ 7 Giao tiếp Trình bày ý tưởng, báo cáo công việc rõ ràng ☐ ✅ ☐ 8 Hợp tác nhóm Làm việc hiệu quả với đồng nghiệp, tham gia nhóm ✅ ☐ ☐ 9 Ứng xử chuyên nghiệp Tôn trọng đồng nghiệp, đối tác, môi trường làm việc ✅ ☐ ☐ 10 Tư duy giải quyết vấn đề Nhận diện vấn đề, đề xuất giải pháp, sáng tạo ☐ ✅ ☐ 11 Đóng góp vào dự án/tổ chức Hiệu quả công việc, sáng kiến cải tiến, ghi nhận từ team ✅ ☐ ☐ 12 Tổng thể Đánh giá chung về toàn bộ quá trình thực tập ✅ ☐ ☐ Cần cải thiện Nâng cao tính kỹ luật, chấp hành nghiêm chỉnh nội quy của công ty hoặc bất kỳ trong một tổ chức nào Cải thiện trong cách tư duy giải quyết vấn đề Học cách giao tiếp tốt hơn trong giao tiếp hằng ngày và trong công việc, xử lý tình huống "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/7-feedback/","title":"Chia sẻ, đóng góp ý kiến","tags":[],"description":"","content":" ⚠️ Lưu ý: Các thông tin dưới đây chỉ nhằm mục đích tham khảo, vui lòng không sao chép nguyên văn cho bài báo cáo của bạn kể cả warning này.\nTại đây bạn có thể tự do đóng góp ý kiến cá nhân về những trải nghiệm khi tham gia chương trình First Cloud Journey, giúp team FCJ cải thiện những vấn đề còn thiếu sót dựa trên các hạng mục sau:\nĐánh giá chung 1. Môi trường làm việc\nMôi trường làm việc rất thân thiện và cởi mở. Các thành viên trong FCJ luôn sẵn sàng hỗ trợ khi mình gặp khó khăn, kể cả ngoài giờ làm việc. Không gian làm việc gọn gàng, thoải mái, giúp mình tập trung tốt hơn. Tuy nhiên, mình nghĩ có thể bổ sung thêm một số buổi giao lưu hoặc team bonding để mọi người hiểu nhau hơn.\n2. Sự hỗ trợ của mentor / team admin\nMentor hướng dẫn rất chi tiết, giải thích rõ ràng khi mình chưa hiểu và luôn khuyến khích mình đặt câu hỏi. Team admin hỗ trợ các thủ tục, tài liệu và tạo điều kiện để mình làm việc thuận lợi. Mình đánh giá cao việc mentor cho phép mình thử và tự xử lý vấn đề thay vì chỉ đưa đáp án.\n3. Sự phù hợp giữa công việc và chuyên ngành học\nCông việc mình được giao phù hợp với kiến thức mình đã học ở trường, đồng thời mở rộng thêm những mảng mới mà mình chưa từng được tiếp cận. Nhờ vậy, mình vừa củng cố kiến thức nền tảng, vừa học thêm kỹ năng thực tế.\n4. Cơ hội học hỏi \u0026amp; phát triển kỹ năng\nTrong quá trình thực tập, mình học được nhiều kỹ năng mới như sử dụng công cụ quản lý dự án, kỹ năng làm việc nhóm, và cả cách giao tiếp chuyên nghiệp trong môi trường công ty. Mentor cũng chia sẻ nhiều kinh nghiệm thực tế giúp mình định hướng tốt hơn cho sự nghiệp.\n5. Văn hóa \u0026amp; tinh thần đồng đội\nVăn hóa công ty rất tích cực: mọi người tôn trọng lẫn nhau, làm việc nghiêm túc nhưng vẫn vui vẻ. Khi có dự án gấp, mọi người cùng nhau cố gắng, hỗ trợ không phân biệt vị trí. Điều này giúp mình cảm thấy mình là một phần của tập thể, dù chỉ là thực tập sinh.\n6. Chính sách / phúc lợi cho thực tập sinh\nCông ty có hỗ trợ phụ cấp thực tập và tạo điều kiện về thời gian linh hoạt khi cần thiết. Ngoài ra, việc được tham gia các buổi đào tạo nội bộ là một điểm cộng lớn.\nMột số câu hỏi khác Điều bạn hài lòng nhất trong thời gian thực tập? Điều bạn nghĩ công ty cần cải thiện cho các thực tập sinh sau? Nếu giới thiệu cho bạn bè, bạn có khuyên họ thực tập ở đây không? Vì sao? Đề xuất \u0026amp; mong muốn Bạn có đề xuất gì để cải thiện trải nghiệm trong kỳ thực tập? Bạn có muốn tiếp tục chương trình này trong tương lai? Góp ý khác (tự do chia sẻ): "},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://addavid888.github.io/AWS-FCJ-Internship/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]